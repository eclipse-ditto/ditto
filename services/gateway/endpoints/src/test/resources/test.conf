akka {
  remote.artery.canonical.port = 0
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "WARNING"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # for log messages during the actor system is starting up and shutting down:
  stdout-loglevel = "WARNING"

  log-config-on-start = off

  default-dispatcher {
    fork-join-executor {
      parallelism-min = 4
      parallelism-factor = 3.0
      parallelism-max = 32
      parallelism-max = ${?DEFAULT_DISPATCHER_PARALLELISM_MAX}
    }
  }

  serializers {
    json = "org.eclipse.ditto.services.utils.cluster.JsonifiableSerializer"
  }

  serialization-bindings {
    # "java.io.Serializable" = none # must not be set in order to get akka.cluster.sharding.ShardRegion$GetShardRegionStats$ serialized
    # Serialize Jsonifiable events with custom JSON serializer:
    "org.eclipse.ditto.model.base.json.Jsonifiable" = json
    "org.eclipse.ditto.model.base.exceptions.DittoRuntimeException" = json
  }
}

extensions = [
  "akka.cluster.pubsub.DistributedPubSub"
]

http {
  server {
    server-header = "" # default: akka-http/${akka.http.version}
    max-connections = 4096 # default: 1024
    backlog = 100 # default: 100
    raw-request-uri-header = on # default: off

    parsing {
      max-uri-length = 8k # default: 2k
      max-content-length = 10m # default: 8m
      illegal-header-warnings = off # default: on
      error-logging-verbosity = simple # default: full
    }
  }

  host-connection-pool {
    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    max-open-requests = 1024 # default: 32

    # The time after which an idle connection pool (without pending requests)
    # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
    idle-timeout = 60s # default: 30s
  }
}

test {
  # factor by which to scale timeouts during tests, e.g. to account for shared
  # build system load
  timefactor = 1.0

  # duration of EventFilter.intercept waits after the block is finished until
  # all required messages are received
  filter-leeway = 3s

  # duration to wait in expectMsg and friends outside of within() block
  # by default
  single-expect-default = 3s

  # The timeout that is added as an implicit by DefaultTimeout trait
  default-timeout = 5s

  calling-thread-dispatcher {
    type = akka.testkit.CallingThreadDispatcherConfigurator
  }
}

ditto.mapping-strategy.implementation = "org.eclipse.ditto.services.gateway.starter.service.util.GatewayMappingStrategy"

ditto {

  gateway {
    http {
      schema-versions = [1, 2]
      # override schema-versions via system properties, e.g.: -Dditto.gateway.proxy.schema-versions.0=1 -Dditto.gateway.proxy.schema-versions.1=2
    }

    cluster {
      # as a rule of thumb: should be factor ten of the amount of cluster nodes available
      # be aware that it must be the same as for all other services (e.g. search-updater)
      number-of-shards = 30
    }

    websocket {
      # the max queue size of how many inflight Commands a single Websocket client can have
      subscriber.backpressure-queue-size = 100

      # the max buffer size of how many outstanding CommandResponses and Events a single Websocket client can have
      # additionally CommandResponses and Events are dropped if this size is reached
      publisher.backpressure-buffer-size = 200
    }

    enforcer {
      # the interval of how long to keep an "inactive" PolicyEnforcer in memory:
      cache.interval = 2h

      # the interval of when to manually sync the underlying Policy of the PolicyEnforcer
      sync.interval = 15m

      # the internal timeout when retrieving the Policy or the ACL or when waiting for a CommandResponse
      internal.ask.timeout = 5s
    }

    message {
      default-timeout = 10s
      max-timeout = 1m
    }

    claim-message {
      default-timeout = 1m
      max-timeout = 10m
    }

    authentication {
      # configures HTTP for different authentication mechanisms: IM3, JWT (e.g. Google), ...
      http {
        # proxy config
        proxy {
          enabled = false
        }
      }

      dummy {
        # enable/disable dummy authentication (for dev purposes)
        enabled = true
      }
    }

    health-check {
      enabled = false
      interval = 60s
      service.timeout = 10s

      cluster-roles.enabled = false
    }

    messaging {
      reconnection-delay = 1s

      metrics {
        enabled = false
      }
    }

    devops {
      securestatus = true
    }

    public-health {
      cache-timeout = 20s
    }

    forcehttps = true
    enablecors = false

    redirect-to-https = true
    redirect-to-https-blacklist-pattern = "/cr.*|/api.*|/ws.*|/status.*"

    cache {
      publickeys {
        maxentries = 32
        expiry = 60m
      }
    }

    things-aggregator {
      single-retrieve-thing-timeout = 30s
    }

  }
}

secrets {
  devops_password = "devops!"
}

sharding-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 4
    parallelism-factor = 2.0
    parallelism-max = 32
    parallelism-max = ${?DEFAULT_DISPATCHER_PARALLELISM_MAX}
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 5 # default is 5
}

blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    // or in Akka 2.4.2+
    fixed-pool-size = 16
  }
  throughput = 100
}
