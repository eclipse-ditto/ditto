ditto {
  mapping-strategy.implementation = "org.eclipse.ditto.services.models.policies.PoliciesMappingStrategies"
  cluster-downing.role = "policies"

  mongodb {
    options {
      ssl = false
      ssl = ${?MONGO_DB_SSL_ENABLED}
      w = 1
    }
  }

  persistence.operations.delay-after-persistence-actor-shutdown = 5s
  persistence.operations.delay-after-persistence-actor-shutdown = ${?DELAY_AFTER_PERSISTENCE_ACTOR_SHUTDOWN}

  policies {
    tags {
      streaming-cache-size = 1000
      streaming-cache-size = ${?TAGS_STREAMING_CACHE_SIZE}
    }

    policy {
      activity-check {
        # the interval of how long to keep an "inactive" Policy in memory:
        inactive-interval = 2h
        inactive-interval = ${?POLICY_ACTIVITY_CHECK_INTERVAL}

        # the interval of how long to keep a deleted Policy in memory
        deleted-interval = 5m
        deleted-interval = ${?POLICY_ACTIVITY_CHECK_DELETED_INTERVAL}
      }

      # the interval to check for modifications and send out an event if modified:
      modification-check {
        interval = 10s
        interval = ${?POLICY_MODIFICATION_CHECK_INTERVAL}
      }

      snapshot {
        # the interval when to do snapshot for a Policy which had changes to it
        interval = 15m
        interval = ${?POLICY_SNAPSHOT_INTERVAL} # may be overridden with this environment variable

        # the threshold after how many changes to a Policy to do a snapshot
        threshold = 500
        threshold = ${?POLICY_SNAPSHOT_THRESHOLD} # may be overridden with this environment variable

        # delete old Snapshot when taking a Snapshot
        delete-old-snapshot = false
        delete-old-snapshot = ${?POLICY_SNAPSHOT_DELETE_OLD} # may be overridden with this environment variable

        # delete old Events when taking a Snapshot
        delete-old-events = false
        delete-old-events = ${?POLICY_EVENTS_DELETE_OLD} # may be overridden with this environment variable
      }

      supervisor {
        exponential-backoff {
          min = 1s
          max = 10s
          random-factor = 0.2
        }
      }
    }
  }
}

akka {
  cluster {
    sharding {
      role = "policies"
    }

    roles = [
      "policies"
    ]
  }

  persistence {
    journal.auto-start-journals = [
      "akka-contrib-mongodb-persistence-policies-journal"
    ]
    snapshot-store.auto-start-snapshot-stores = [
      "akka-contrib-mongodb-persistence-policies-snapshots"
    ]
  }
}

akka-contrib-mongodb-persistence-policies-journal {
  class = "akka.contrib.persistence.mongodb.MongoJournal"
  plugin-dispatcher = "policy-journal-persistence-dispatcher"

  circuit-breaker {
    max-failures = 5 # if an exception during persisting an event/snapshot occurs this often -- a successful write resets the counter
    max-failures = ${?BREAKER_MAXTRIES}
    call-timeout = 5s # MongoDB Timeouts causing the circuitBreaker to open
    call-timeout = ${?BREAKER_TIMEOUT}
    reset-timeout = 3s # after this time in "Open" state, the cicuitBreaker is "Half-opened" again
    reset-timeout = ${?BREAKER_RESET}
  }

  overrides {
    journal-collection = "policies_journal"
    journal-index = "policies_journal_index"

    realtime-collection = "policies_realtime"
    metadata-collection = "policies_metadata"
  }

  event-adapters {
    mongodbobject = "org.eclipse.ditto.services.policies.persistence.serializer.PolicyMongoEventAdapter"
  }

  event-adapter-bindings {
    "org.eclipse.ditto.signals.events.policies.PolicyEvent" = mongodbobject
    "org.bson.BsonValue" = mongodbobject
  }
}

akka-contrib-mongodb-persistence-policies-snapshots {
  class = "akka.contrib.persistence.mongodb.MongoSnapshots"
  plugin-dispatcher = "policy-snaps-persistence-dispatcher"

  circuit-breaker {
    max-failures = 5 # if an exception during persisting an event/snapshot occurs this often -- a successful write resets the counter
    max-failures = ${?SNAPSHOT_BREAKER_MAXTRIES}
    call-timeout = 10s # MongoDB Timeouts causing the circuitBreaker to open
    call-timeout = ${?SNAPSHOT_BREAKER_TIMEOUT}
    reset-timeout = 6s # after this time in "Open" state, the cicuitBreaker is "Half-opened" again
    reset-timeout = ${?SNAPSHOT_BREAKER_RESET}
  }

  overrides {
    snaps-collection = "policies_snaps"
    snaps-index = "policies_snaps_index"
  }
}

# journal & snapshot collections for MongoReadJournal
ditto-akka-persistence-mongo-readjournal {
  # Class name of the plugin.
  class = "akka.contrib.persistence.mongodb.MongoReadJournal"

  overrides {
    journal-collection = "policies_journal"
    journal-index = "policies_journal_index"

    realtime-collection = "policies_realtime"
    metadata-collection = "policies_metadata"

    snaps-collection = "policies_snaps"
    snaps-index = "policies_snaps_index"
  }

  tags.publishing {
    # if the publishing of thing tags should be enabled or not
    enabled = true
    enabled = ${?POLICY_TAGS_PUBLISHING_ENABLED}

    # the pause before the first and between two runs over the whole collection of tags
    pause = 1m
    pause = ${?POLICY_TAGS_PUBLISHING_PAUSE}

    # the offset after which thing tags without changes will be published
    offset = 60m
    offset = ${?POLICY_TAGS_PUBLISHING_OFFSET}

    # how many elements in an interval will be published at most
    elements = 10
    elements = ${?POLICY_TAGS_PUBLISHING_ELEMENTS}

    # the interval to publish the given amount of elements
    interval = 1m
    interval = ${?POLICY_TAGS_PUBLISHING_INTERVAL}
  }
}

policy-journal-persistence-dispatcher {
  type = Dispatcher
  # which mailbox to use
  mailbox-type = "org.eclipse.ditto.services.policies.persistence.actors.policy.PolicyPersistenceActorMailbox"
  mailbox-capacity = 100
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 4
    parallelism-factor = 3.0
    parallelism-max = 32
    parallelism-max = ${?DEFAULT_DISPATCHER_PARALLELISM_MAX}
  }
  throughput = 5
}

policy-snaps-persistence-dispatcher {
  type = Dispatcher
  # which mailbox to use
  mailbox-type = "org.eclipse.ditto.services.policies.persistence.actors.policy.PolicyPersistenceActorMailbox"
  mailbox-capacity = 100
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 4
    parallelism-factor = 3.0
    parallelism-max = 32
    parallelism-max = ${?DEFAULT_DISPATCHER_PARALLELISM_MAX}
  }
  throughput = 5
}

akka.contrib.persistence.mongodb.mongo {
  suffix-builder {
    separator = "@"
    separator = ${?MONGO_COLLECTION_NAME_SUFFIX_SEPARATOR}
    // set class="" to disable suffixing
    class = "org.eclipse.ditto.services.utils.persistence.mongo.suffixes.NamespaceSuffixCollectionNames"
    class = ${?MONGO_COLLECTION_NAME_SUFFIX_CLASS}
    supported-prefixes = ["policy"]
  }

  collection-cache {
    journal {
      class = "org.eclipse.ditto.services.utils.persistence.mongo.DittoMongoCollectionCache"
      expire-after-write = 1h // check each collection every hour whether it was created correctly
      expire-after-write = ${?MONGO_COLLECTION_CACHE_JOURNAL_TTL}
      max-size = 1000 // namespace collections cached per node
      max-size = ${?MONGO_COLLECTION_CACHE_JOURNAL_MAX_SIZE}
    }

    snaps {
      class = "org.eclipse.ditto.services.utils.persistence.mongo.DittoMongoCollectionCache"
      expire-after-write = 1h
      expire-after-write = ${?MONGO_COLLECTION_CACHE_SNAPS_TTL}
      max-size = 1000
      max-size = ${?MONGO_COLLECTION_CACHE_JOURNAL_MAX_SIZE}
    }
  }
}
