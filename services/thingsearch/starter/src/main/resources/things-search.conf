ditto {
  mapping-strategy.implementation = "org.eclipse.ditto.services.models.thingsearch.ThingSearchMappingStrategy"

  services-utils-config.mongodb {
    pool {
      maxSize = 1000
      maxSize = ${?MONGO_DB_CONNECTION_POOL_SIZE}
      maxWaitTime = 30s
      maxWaitTime = ${?MONGO_DB_CONNECTION_POOL_WAIT_TIME}
      maxWaitQueueSize = 1000
      maxWaitQueueSize = ${?MONGO_DB_CONNECTION_POOL_QUEUE_SIZE}
      jmxListenerEnabled = false
      jmxListenerEnabled = ${?MONGO_DB_CONNECTION_POOL_JMX_LISTENER_ENABLED}
    }
  }

  things-search {
    http {
      # InetAddress.getLocalHost.getHostAddress is used if empty
      hostname = ""
      hostname = ${?HOSTNAME}
      hostname = ${?BIND_HOSTNAME}
      port = 8080
      port = ${?HTTP_PORT}
      port = ${?PORT}
    }

    cluster {
      # enables the majority check that solves network partitions automatically
      majority-check.enabled = false
      majority-check.enabled = ${?CLUSTER_MAJORITY_CHECK_ENABLED}

      # the delay after which the cluster majority is checked
      majority-check.delay = 30s
      majority-check.delay = ${?CLUSTER_MAJORITY_CHECK_DELAY}

      # as a rule of thumb: should be factor ten of the amount of cluster nodes available
      # be aware that it must be the same as for all other services (e.g. things)
      number-of-shards = 30
      number-of-shards = ${?CLUSTER_NUMBER_OF_SHARDS}
    }

    mongodb {
      breaker {
        maxFailures = 5 # defines ater how many failures the circuit breaker should open
        maxFailures = ${?BREAKER_MAXFAILURES}
        timeout {
          call = 5s # MongoDB Timeouts causing the circuitBreaker to open - "0s" disables timeouts opening the breaker
          call = ${?BREAKER_TIMEOUT}
          reset = 10s # after this time in "Open" state, the cicuitBreaker is "Half-opened" again
          reset = ${?BREAKER_RESET}
        }
      }
      monitoring {
        commands = true
        commands = ${?MONGODB_MONITORING_COMMANDS_ENABLED}
        connection-pool = true
        commands = ${?MONGODB_MONITORING_CONNECTION_POOL_ENABLED}
      }
    }

    health-check {
      enabled = true
      enabled = ${?HEALTH_CHECK_ENABLED} # may be overridden with this environment variable
      interval = 60s

      persistence {
        enabled = true
        enabled = ${?HEALTH_CHECK_PERSISTENCE_ENABLED} # may be overridden with this environment variable
        timeout = 60s
      }
    }

    index-initialization {
      #indices should be created within this application
      enabled = true
      enabled = ${?INDEX_INITIALIZATION_ENABLED}
    }

    metrics {
      systemMetrics.enabled = true
      systemMetrics.enabled = ${?SYSTEM_METRICS_ENABLED}

      prometheus {
        enabled = true
        enabled = ${?PROMETHEUS_ENABLED}
        hostname = 0.0.0.0
        hostname = ${?PROMETHEUS_HOSTNAME}
        port = 9095
        port = ${?PROMETHEUS_PORT}
      }
    }

    # configuration regarding physical deletion of "__deleted" Things from "thingEntities" collection
    deletion {
      enabled = true

      # delete "__deleted" Things older than:
      deletion-age = 3d
      # run each:
      run-interval = 24h
      # the first run should be at (UTC time):
      first-interval-hour = 21 # 21:00 UTC
    }

    updater {

      max-bulk-size = ${?MAX_BULK_SIZE}

      activity-check-interval = 1m
      activity-check-interval = ${?ACTIVITY_CHECK_INTERVAL}

      event-processing {
        active = true
        active = ${?EVENT_PROCESSING_ACTIVE}
      }

      sync {
        things {
          active = true
          active = ${?THINGS_SYNCHRONIZATION_ACTIVE}
          start-offset = 30m
          start-offset = ${?THINGS_SYNCHRONIZATION_START_OFFSET}
          initial-start-offset = 120m
          initial-start-offset = ${?THINGS_SYNCHRONIZATION_INITIAL_START_OFFSET}
          stream-interval = 5m
          stream-interval = ${?THINGS_SYNCHRONIZATION_STREAM_INTERVAL}
          outdated-warning-offset = 3h
          outdated-warning-offset = ${?THINGS_SYNCHRONIZATION_OUTDATED_WARNING_OFFSET}
          outdated-error-offset = 4h
          outdated-error-offset = ${?THINGS_SYNCHRONIZATION_OUTDATED_ERROR_OFFSET}
          max-idle-time = 1m
          max-idle-time = ${?THINGS_SYNCHRONIZATION_MAX_IDLE_TIME}
          streaming-actor-timeout = 5m
          streaming-actor-timeout = ${?THINGS_SYNCHRONIZATION_STREAMING_ACTOR_TIMEOUT}
          elements-streamed-per-batch = 10
          elements-streamed-per-batch = ${?THINGS_SYNCHRONIZATION_ELEMENTS_PER_SECOND}
        }

        policies {
          active = true
          active = ${?POLICIES_SYNCHRONIZATION_ACTIVE}
          start-offset = 30m
          start-offset = ${?POLICIES_SYNCHRONIZATION_START_OFFSET}
          initial-start-offset = 120m
          initial-start-offset = ${?POLICIES_SYNCHRONIZATION_INITIAL_START_OFFSET}
          stream-interval = 5m
          stream-interval = ${?POLICIES_SYNCHRONIZATION_STREAM_INTERVAL}
          outdated-warning-offset = 3h
          outdated-warning-offset = ${?POLICIES_SYNCHRONIZATION_OUTDATED_WARNING_OFFSET}
          outdated-error-offset = 4h
          outdated-error-offset = ${?POLICIES_SYNCHRONIZATION_OUTDATED_ERROR_OFFSET}
          max-idle-time = 1m
          max-idle-time = ${?POLICIES_SYNCHRONIZATION_MAX_IDLE_TIME}
          // streaming actor timeout is set generouslyl because each policy tag may trigger updates at many things.
          streaming-actor-timeout = 30m
          streaming-actor-timeout = ${?POLICIES_SYNCHRONIZATION_STREAMING_ACTOR_TIMEOUT}
          elements-streamed-per-batch = 1
          elements-streamed-per-batch = ${?POLICIES_SYNCHRONIZATION_ELEMENTS_PER_SECOND}
        }
      }
    }
  }

}

akka {
  actor {
    custom-updater-mailbox {
      mailbox-type = "org.eclipse.ditto.services.thingsearch.updater.actors.mailbox.ThingUpdaterMailbox"
      mailbox-capacity = 1000
      mailbox-capacity = ${?UPDATER_MAILBOX_CAPACITY}
      stash-capacity = 1000
      stash-capacity = ${?UPDATER_STASH_CAPACITY}
    }
  }

  cluster {
    sharding {
      role = "things-search"
    }

    roles = [
      "things-search"
    ]
  }
}

search-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 4
    parallelism-factor = 2.0
    parallelism-max = 32
    parallelism-max = ${?DEFAULT_DISPATCHER_PARALLELISM_MAX}
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 5
}
