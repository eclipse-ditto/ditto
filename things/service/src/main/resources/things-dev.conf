ditto {
  entity-creation {
    grant = [
      {
        resource-types = ["thing"]
        namespaces = [
          "*"  # allow creation of things in any namespace
        ]
        auth-subjects = [
          "*"  # allow any authenticated subject
        ]
        thing-definitions = [
          null,
          "*" # allow any definition
        ]
      },
      {
        resource-types = ["thing"]
        namespaces = ["some.dimmable.lamp.namespace"]
        auth-subjects = ["pre:ditto"]
        thing-definitions = [ # don't allow null here - so a definition is required when creating a thing in this namespace
          "https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp*" # only creation of dimmable-colored-lamp things allowed
        ]
      }
    ]
    revoke = []
  }

  http {
    hostname = "localhost"
    port = 8090
  }

  metrics.prometheus.port = 9011

  things {
    thing {
      event {
        pre-defined-extra-fields = [
          {
            namespaces = [
              "*"
            ]
            condition = "exists(definition)"
            extra-fields = [
              "definition"
            ]
          },
          {
            namespaces = [
              "org.eclipse.ditto.lamps"
            ]
            extra-fields = [
              "attributes/manufacturer",
              "attributes/serial"
            ]
          }
        ]
      }

      message {
        pre-defined-extra-fields = [
          {
            namespaces = [
              "*"
            ]
            condition = "exists(definition)"
            extra-fields = [
              "definition"
            ]
          },
          {
            namespaces = [
              "org.eclipse.ditto.lamps"
            ]
            extra-fields = [
              "attributes/message-stuff"
            ]
          }
        ]
      }

      merge {
        remove-empty-objects-after-patch-condition-filtering = true
      }
    }

    wot {
      tm-model-validation {
        enabled = true

        dynamic-configuration = [
          {
            validation-context {
              // all 3 "patterns" conditions have to match (AND)
              ditto-headers-patterns = [      // if any (OR) of the contained headers block match
                {
                  // inside the object, all patterns have to match (AND)
                  ditto-originator = "^pre:ditto2$"
                }
              ]
              thing-definition-patterns = [   // if any (OR) of the contained patterns match
                //"^https://eclipse-ditto.github.io/ditto-examples/wot/models/.*$"
              ]
              feature-definition-patterns = [ // if any (OR) of the contained patterns match

              ]
            }
            // if the validation-context "matches" a processed API call, apply the following overrides:
            config-overrides {
//              enabled = false
              thing {
                enforce {
                  attributes = false
                }
                forbid {
                  thing-description-deletion = false
                }
              }
              feature {
                enforce {
                  properties = false
                }
                forbid {
                  feature-description-deletion = false
                }
              }
            }
          }
          {
            validation-context {
              // all 3 "patterns" conditions have to match (AND)
              ditto-headers-patterns = [      // if any (OR) of the contained headers block match
                {
                  // inside the object, all patterns have to match (AND)
                  skip-validation = "^false$"
                }
              ]
              thing-definition-patterns = [   // if any (OR) of the contained patterns match
              ]
              feature-definition-patterns = [ // if any (OR) of the contained patterns match

              ]
            }
            // if the validation-context "matches" a processed API call, apply the following overrides:
            config-overrides {
              enabled = true
              thing {
                enforce-attributes = true
              }
              feature {
              }
            }
          }
        ]
      }
    }
  }
}

pekko {
  management.http.port = 25530

  remote {
    # for debugging purpose
    watch-failure-detector {
      expected-response-after = 120s
    }

    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 2553
      canonical.port = ${?REMOTE_PORT}
      bind.bind-timeout = 6s
      bind.bind-timeout = ${?ARTERY_BIND_TIMEOUT}
    }
  }

  cluster {
    # for debugging purpose
    failure-detector {
      expected-response-after = 120s
      threshold = 16.0
      acceptable-heartbeat-pause = 120s
    }

    seed-nodes = [
      "pekko://ditto-cluster@127.0.0.1:2552", # port of the policies service to join in cluster
      "pekko://ditto-cluster@"${pekko.remote.artery.canonical.hostname}":"${pekko.remote.artery.canonical.port}
    ]
  }
}
