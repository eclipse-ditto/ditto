# Copyright (c) 2017 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
openapi: 3.0.0
info:
  title: Eclipse Ditto HTTP API
  description: JSON-based, REST-like API for Eclipse Ditto
  version: "2"
servers:
  - url: https://ditto.eclipse.org/api/2
    description: "online Ditto Sandbox"
  - url: /api/2
    description: "local Ditto"
tags:
  - name: Things
    description: Manage every Thing
  - name: Features
    description: Structure the Features of your Things
  - name: Policies
    description: Control access to your Things
  - name: Things-Search
    description: Find every Thing
  - name: Messages
    description: Talk with your Things
security:
  #  - Google:
  #    - openid
  - basicAuth: []
  - bearerAuth: []
paths:
  ###
  ### Things
  ###
  /things:
    get:
      summary: List all available Things
      description: |-
        Returns all Things passed in by the required parameter `ids`. Optionally
        you can use field selectors (see parameter `fields`) to only get the
        specified fields.
      tags:
        - Things
      parameters:
        - name: ids
          in: query
          description: |-
            Contains a comma separated list of `thingId`s to retrieve in one
            single request.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/thingFieldsQueryParam'
      responses:
        '200':
          description: |-
            The successfully completed request contains as its result the first
            200 for the user available Things, sorted by their `thingId`.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thing'
        '400':
          description: |-
            The request could not be completed. At least one of the defined
            query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '414':
          description: |-
            The request could not be completed due to an URI length exceeding 8k
            characters.
    post:
      summary: Create a new Thing
      description: |-
        Creates the Thing defined in the optional JSON body.

        The ID of the created Thing is a UUID generated by the service with the default namespace `org.eclipse.ditto`.
        Any `thingId` specified in the request body is
        therefore ignored. The Policy must include at least one entry with
        `WRITE` permission on the `policy:/` resource. If no Policy is provided,
        a default Policy will be created which grants all permissions to the
        authorized subject on the root thing and policy resource.
      tags:
        - Things
      responses:
        '201':
          description: The Thing was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Thing resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        '400':
          description: |-
            The request could not be completed. Possible reasons:

              * the `thingId` was wrongly set in the request body
              * the JSON of the Thing to be created was invalid

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed. Either
              * as the caller would not have access to the thing after creating it with the given policy.
              * as the caller had insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed as either:
              * the referenced thing does not exist.
              * the caller had insufficient permissions to read the referenced thing.
              * the Policy that should be copied does not exist.
              * the caller had insufficient permissions to read the Policy that should be copied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewThing'
            example: {}
        description: JSON representation of the Thing to be created.
  '/things/{thingId}':
    get:
      summary: Retrieve a specific Thing
      description: |-
        Returns the Thing identified by the `thingId` path parameter. The
        response includes details about the Thing. Note that the Thing's Policy
        is not included in the response per default. Optionally you can use
        field selectors (see parameter `fields`) to only get the specified
        fields. E.g., you can get the Thing's Policy by using a field selector.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/thingFieldsQueryParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The request successfully returned the specific Thing.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or one of the defined query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or update a Thing with a specified ID
      description: |-
        Create or update the Thing specified by the `thingId` path parameter and
        the optional JSON body. The `thingId` has to:

          * contain a mandatory namespace prefix (java package notation + `:` colon) - periods (`.`) may be used in namespace but not as first or last character
          * conform to RFC-2396 (URI)

        #### Valid examples

          * `com.bosch.myproject:myFridge1`
          * `mynamespace:myFridge1`

        #### Invalid examples

          * `42:myFridge1`
          * `.foo:myFridge1`
          * `bar.:myFridge1`

        The ID of a Thing can't be changed after creation. Any `thingId`
        specified in the request body is therefore ignored.

        ### Creation of a new Thing

        The Policy must include at least one entry with `WRITE` permission on
        the `policy:/` resource. If no Policy is provided, a default Policy will
        be created which grants all permissions to the authorized subject on the
        root thing and policy resource.

        ### Permissions for updating an existing Thing

        For updating an existing Thing the authorized subject has to have an
        unrestricted `WRITE` permission on the Thing's root resource.

        ### Partially updating an existing Thing

        When updating an existing Thing already containing `attributes`, `policyId` or `features` the already existing fields
        must not explicitly be provided again. For this "PUT Thing" request (and only for this top-level update on the
        Thing) the top-level field to update is merged with the existing top-level fields of the Thing.


        For example: A Thing already exists with this content:

        ```

        {
          "thingId": "namespace:thing-name",
          "policyId": "namespace:policy-name",
          "attributes": {
            "foo": 1
          },
          "features": {...}
        }

        ```

        The Thing's `attributes` may be modified without having to pass the `policyId` or the `features` in again. The content
        of the request's body would be sufficient for updating the `attributes`:

        ```

        {
          "attributes": {
            "foo": 2,
            "bar": false
          }
        }

        ```

        The `policyId` and `features` of the Thing will not be overwritten, the Thing will be merged as one would expect it:

        ```

        {
          "thingId": "namespace:thing-name",
          "policyId": "namespace:policy-name",
          "attributes": {
            "foo": 2,
            "bar": false
          },
          "features": {...}
        }

        ```
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Thing was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Thing resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        '204':
          description: The Thing was successfully modified.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON of the Thing to be created/modified was either invalid
            or did contain a `thingId` which did not match the ID in the URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed. Either
              * as the caller would not have access to the thing after creating it with the given policy.
              * as the caller had insufficient permissions.
                For modifying an existing Thing an unrestricted `WRITE` permission on the Thing's root resource is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed as either:
              * the referenced thing does not exist.
              * the caller had insufficient permissions to read the referenced thing.
              * the Policy that should be copied does not exist.
              * the caller had insufficient permissions to read the Policy that should be copied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewThing'
            example: {}
        description: JSON representation of the Thing to be modified.
    delete:
      summary: Delete a specific Thing
      description: |-
        Deletes the Thing identified by the `thingId` path parameter. This will
        not delete the Policy used for controlling access to this Thing managed
        by resource `/policies/{policyId}`.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Thing was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting an existing Thing an unrestricted `WRITE` permission on the Thing's root resource is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/things/{thingId}/policyId':
    get:
      summary: Retrieve the Policy ID of a Thing
      description: |-
        Returns the Policy ID of the Thing identified by the `thingId` path parameter.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The request successfully returned the Policy ID.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: The request could not be completed. The Thing with the given ID was not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or update the Policy ID of a Thing
      description: |-
        Create or update the Policy ID of the Thing identified by the `thingId`
        path parameter. If the Thing had not yet a `policyId` set it was
        considered to be in API version 1, access controlled by the `acl`
        mechanism. In that case PUTing a `policyId` will create the Policy ID.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: |-
            The Policy ID was successfully created - the Thing was migrated to API version 2.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '204':
          description: The Policy ID was successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'


        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '<namespace>:<policyName>'
        description: |-
          The Policy ID used for controlling access to this Thing. Managed by
          resource `/policies/{policyId}`.

            * contain the mandatory namespace prefix (java package notation + `:` colon) - periods (`.`) may be used in namespace but not as first or last character
            * conform to RFC-2396 (URI)
        required: true
  '/things/{thingId}/attributes':
    get:
      summary: List all Attributes of a specific Thing
      description: |-
        Returns all Attributes of the Thing identified by the `thingId` path parameter.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/attributesFieldsQueryParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The Attributes of the specific Thing were successfully retrieved.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attributes'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or update all Attributes of a specific Thing at once
      description: |-
        Create or update the Attributes of a Thing identified by the `thingId`
        path parameter at once. The Attributes will be replaced by the request
        body's JSON.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Attributes were successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Attribute resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attributes'
        '204':
          description: The Attributes were successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid or was not a JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying the Attributes of an existing Thing `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        $ref: '#/components/requestBodies/Attributes'
    delete:
      summary: Delete all Attributes of a specific Thing at once
      description: |-
        Deletes all Attributes of the Thing identified by the `thingId` path
        parameter at once.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Attributes were successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting all Attributes of an existing Thing `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID or
            its Attributes were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/things/{thingId}/attributes/{attributePath}':
    get:
      summary: Retrieve a specific Attribute of a specific Thing
      description: |-
        Returns a specific Attribute of the Thing identified by the `thingId`
        path parameter. The Attribute (JSON) can be referenced hierarchically by
        applying JSON Pointer notation (RFC-6901), e.g.:
        `/things/{thingId}/attributes/address/city` in order to retrieve the
        `city` field of an `address` object.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/attributePathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The Attribute was successfully retrieved.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Thing with the given ID or
            the Attribute at the specified path was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or update a specific Attribute of a specific Thing
      description: |-
        Create or update a specific Attribute of the Thing identified by the
        `thingId` path parameter. The Attribute will be created if it doesn't
        exist or else updated. The Attribute (JSON) can be referenced
        hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:
        `/things/{thingId}/attributes/address/city` in order to create/update
        the `city` field of an `address` object.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/attributePathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Attribute was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Attribute resource
              schema:
                type: string
        '204':
          description: The Attribute was successfully modified.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying a single Attribute of an existing Thing `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        $ref: '#/components/requestBodies/Value'
    delete:
      summary: Delete a specific Attribute of a specific Thing
      description: |-
        Deletes a specific Attribute of the Thing identified by the `thingId`
        path parameter. The Attribute (JSON) can be referenced hierarchically by
        applying JSON Pointer notation (RFC-6901), e.g.:
        `/things/{thingId}/attributes/address/city` in order to delete the
        `city` field of an `address` object.
      tags:
        - Things
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/attributePathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Attribute was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting a single Attribute of an existing Thing `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID or
            the Attribute at the specified path was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  ###
  ### Features
  ###
  '/things/{thingId}/features':
    get:
      summary: List all Features of a specific Thing
      description: |-
        Returns all Features of the Thing identified by the `thingId` path
        parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featuresFieldsQueryParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: |-
            The list of Features of the specific Thing were successfully
            retrieved.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Features'
              example:
                {
                  "featureId1": {
                    "definition": [ "namespace:definition1:v1.0" ],
                    "properties": { "property1": "value1" }
                  },
                  "featureId2": {
                    "definition": [ "namespace:definition2:v1.0" ],
                    "properties": { "property2": "value2" }
                  }
                }
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found or the Features have not been defined.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or modify all Features of a specific Thing at once
      description: |-
        Create or modify the Features of a Thing identified by the `thingId`
        path parameter at once. The list of Features will be replaced by the
        request body's JSON.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Features were successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Features resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Features'
              example:
                {}
        '204':
          description: The Features were successfully modified.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid or was not a JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying all features of an existing Thing `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Features'
            example: {}
        description: |-
          JSON object of the Features to be modified at once. It can be also
          `null` or an empty object `{}` (all features cleared).
        required: true
    delete:
      summary: Delete all Features of a specific Thing
      description: |-
        Deletes all features of the Thing identified by the `thingId` path
        parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Features were successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting all features of an existing Thing `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found or the Features have not been defined.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/things/{thingId}/features/{featureId}':
    get:
      summary: Retrieve a specific Feature of a specific Thing
      description: |-
        Returns a specific Feature identified by the `featureId` path parameter
        of the Thing identified by the `thingId` path parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/featureFieldsQueryParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The Feature was successfully retrieved.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Thing with the given ID or
            the Feature with the specified `featureId` was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or modify a specific Feature of a specific Thing
      description: |-
        Create or modify a specific Feature identified by the `featureId` path
        parameter of the Thing identified by the `thingId` path parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Feature was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Feature resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        '204':
          description: The Feature was successfully modified.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON of the Feature to be created was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying a single feature of an existing Thing `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID was
            not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
            example: {}
        description: |-
          JSON representation of the Feature to be created/modified. It can also
          be `null` or an empty object `{}`.
        required: true
    delete:
      summary: Delete a specific Feature of a specific Thing
      description: |-
        Deletes a specific Feature identified by the `featureId` path parameter
        of the Thing identified by the `thingId` path parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Feature was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting a single feature of an existing Thing `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing with the given ID or
            the Feature at the specified path was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/things/{thingId}/features/{featureId}/definition':
    get:
      summary: List the Definition of a Feature
      description: |-
        Returns the complete Definition of the Feature identified by the `thingId` and
        `featureId` path parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The Definition was successfully retrieved.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureDefinition'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The specified Feature has no
            Definition or the Thing with the specified `thingId` or the Feature
            with `featureId` was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or update the Definition of a Feature
      description: |-
        Create or update the complete Definition of a Feature identified by the `thingId`
        and `featureId` path parameter at once. The Definition will be replaced
        by the request body's JSON array.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Definition was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Definition resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureDefinition'
        '204':
          description: The Definition was successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying the Definition of an existing Feature `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing or the Feature with
            the given ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureDefinition'
            example: {}
        description: |-
          JSON array of the complete Definition to be updated. Consider that the
          value has to be a JSON array or `null`. The content of the JSON array
          are strings in the format `"namespace:name:version"` which is
          enforced.
        required: true
    delete:
      summary: Delete the Definition of a Feature
      description: |-
        Deletes the complete Definition of the Feature identified by the `thingId` and
        `featureId` path parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Definition was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting the Definition of an existing Feature `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The specified Feature has no
            Definition or the Thing with the specified `thingId` or the Feature
            with `featureId` was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/things/{thingId}/features/{featureId}/properties':
    get:
      summary: List all Properties of a Feature
      description: |-
        Returns all Properties of the Feature identified by the `thingId` and
        `featureId` path parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/propertiesFieldsQueryParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The Properties were successfully retrieved.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureProperties'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The specified Feature has no
            Properties or the Thing with the specified `thingId` or the Feature
            with `featureId` was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or update all Properties of a Feature at once
      description: |-
        Create or update the Properties of a Feature identified by the `thingId`
        and `featureId` path parameter at once. The Properties will be replaced
        by the request body's JSON.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Properties were successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureProperties'
        '204':
          description: The Properties were successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying the Properties of an existing Feature `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing or the Feature with
            the given ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureProperties'
            example: {}
        description: |-
          JSON object of all Properties to be updated at once. Consider that the
          value has to be a JSON object or `null`. We strongly recommend to use
          a restricted set of characters for the key (identifier). Currently
          these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*
        required: true
    delete:
      summary: Delete all Properties of a Feature
      description: |-
        Deletes all Properties of the Feature identified by the `thingId` and
        `featureId` path parameter.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Properties were successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting the Properties of an existing Feature `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The specified Feature has no
            Properties or the Thing with the specified `thingId` or the Feature
            with `featureId` was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/things/{thingId}/features/{featureId}/properties/{propertyPath}':
    get:
      summary: Retrieve a specific Property of a Feature
      description: |-
        Returns the Property of the Feature identified by the `thingId` and
        `featureId` path parameter. The Property (JSON) can be referenced
        hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:
        `/things/{thingId}/features/{featureId}/properties/location/latitude` in
        order to retrieve the `latitude` field of an `location` Property.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/propertyPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The Property was successfully retrieved.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The specified Property or the
            Thing with the specified `thingId` or the Feature with `featureId`
            was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or update a specific Property of a Feature
      description: |-
        Create or update a specific Property of a Feature identified by the
        `thingId` and `featureId` path parameter. The Property will be created
        if it doesn't exist or else updated. The Property (JSON) can be
        referenced hierarchically by applying JSON Pointer notation (RFC-6901),
        e.g.:
        `/things/{thingId}/features/{featureId}/properties/location/latitude` in
        order to create/update the `latitude` field of an `location` object.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/propertyPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Property was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '204':
          description: The Property was successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For creating/updating a Property of an existing Feature `WRITE` permission is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Thing or the Feature with
            the given ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        $ref: '#/components/requestBodies/Value'
    delete:
      summary: Delete a specific Property of a Feature
      description: |-
        Deletes a specific Property of the Feature identified by the `thingId`
        and `featureId` path parameter.  The Property (JSON) can be referenced
        hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:
        `/things/{thingId}/features/{featureId}/properties/location/latitude` in
        order to delete the `latitude` field of an `location` Property.
      tags:
        - Features
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/propertyPathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Property was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The specified Property or the
            Thing with the specified `thingId` or the Feature with `featureId`
            was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  ###
  ### Messages
  ###
  '/things/{thingId}/inbox/claim':
    post:
      summary: Initiates claiming a specific Thing in order to gain access
      description: |-
        Send a Claim message to the Thing identified by the `thingId` path
        parameter in order to gain access to it. The Claim message is forwarded
        together with the request body and `Content-Type` header to client(s)
        which registered for Claim messages of the specific Thing.


        The decision whether to grant access (by setting permissions) is
        completely up to the client(s) which handle the Claim message.


        The HTTP request blocks until a response to the issued Claim message is
        available or until the `timeout` is expired. If many clients respond to
        the issued message, the first response will complete the HTTP request.
        No special permissions are required to issue a Claim message.
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/messageClaimTimeoutParam'
      responses:
        '200':
          description: |-
            The Claim message was processed successfully and the response body
            contains the custom response. The response body may contain
            arbitrary data chosen by the recipient. The response code defaults
            to `200` but may be chosen by the recipient too.
        '204':
          description: |-
            The Claim message was processed successfully and no custom response
            body was set. The response code defaults to `204` but may be chosen
            by the recipient.
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '413':
          $ref: '#/components/responses/messageTooLarge'
        '429':
          description: |-
            The user has sent too many requests in a given amount of time ("rate
            limiting").
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
      requestBody:
        $ref: '#/components/requestBodies/Payload'
  '/things/{thingId}/inbox/messages/{messageSubject}':
    post:
      summary: Send a message TO a specific Thing
      description: |-
        Send a message with the subject `messageSubject` `TO` the Thing
        identified by the `thingId` path parameter. The request body contains
        the message payload and the `Content-Type` header defines its type. The
        API does not provide any kind of acknowledgement that the message was
        received by the Thing. In order to send a message, the user needs `WRITE`
        permission at the Thing level.

        The HTTP request blocks until a response to the message is available
        or until the `timeout` is expired. If many clients respond to
        the issued message, the first response will complete the HTTP request.

        In order to handle the message in a fire and forget manner, add
        a query-parameter `timeout=0` to the request.
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/messageSubjectPathParam'
        - $ref: '#/components/parameters/messageTimeoutParam'
      responses:
        '202':
          description: |-
            The message was sent but not necessarily received by the Thing (fire and forget).
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller does not have `WRITE` permission on the resource message:/inbox/messages/`messageSubject`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '413':
          $ref: '#/components/responses/messageTooLarge'
      requestBody:
        $ref: '#/components/requestBodies/Payload'
  '/things/{thingId}/outbox/messages/{messageSubject}':
    post:
      summary: Send a message FROM a specific Thing
      description: |-
        Send a message with the subject `messageSubject` `FROM` the Thing
        identified by the `thingId` path parameter. The request body contains
        the message payload and the `Content-Type` header defines its type.
        In order to send a message, the user needs `WRITE` permission at the
        Thing level.

        The HTTP request blocks until a response to the message is available
        or until the `timeout` is expired. If many clients respond to
        the issued message, the first response will complete the HTTP request.

        In order to handle the message in a fire and forget manner, add
        a query-parameter `timeout=0` to the request.
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/messageSubjectPathParam'
        - $ref: '#/components/parameters/messageTimeoutParam'
      responses:
        '202':
          description: The message was sent (fire and forget).
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller does not have `WRITE` permission on the resource message:/outbox/messages/`messageSubject`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '413':
          $ref: '#/components/responses/messageTooLarge'
      requestBody:
        $ref: '#/components/requestBodies/Payload'
  '/things/{thingId}/features/{featureId}/inbox/messages/{messageSubject}':
    post:
      summary: Send a message TO a specific Feature of a specific Thing
      description: |-
        Send a message with the subject `messageSubject` `TO` the Feature
        specified by the `featureId` and `thingId` path parameter. The request
        body contains the message payload and the `Content-Type` header defines
        its type. The API does not provide any kind of acknowledgement that the
        message was received by the Feature. In order to send a message, the user needs `WRITE` permission at the Thing level.

        The HTTP request blocks until a response to the message is available
        or until the `timeout` is expired. If many clients respond to
        the issued message, the first response will complete the HTTP request.

        In order to handle the message in a fire and forget manner, add
        a query-parameter `timeout=0` to the request.
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/messageSubjectPathParam'
        - $ref: '#/components/parameters/messageTimeoutParam'
      responses:
        '202':
          description: |-
            The message was sent but not necessarily received by the Feature
            (fire and forget).
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller does not have `WRITE` permission on the resource message:/features/`featureId`/inbox/messages/`messageSubject`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '413':
          $ref: '#/components/responses/messageTooLarge'
      requestBody:
        $ref: '#/components/requestBodies/Payload'
  '/things/{thingId}/features/{featureId}/outbox/messages/{messageSubject}':
    post:
      summary: Send a message FROM a specific Feature of a specific Thing
      description: |-
        Send a message with the subject `messageSubject` `FROM` the Feature
        specified by the `featureId` and `thingId` path parameter. The request
        body contains the message payload and the `Content-Type` header defines
        its type. In order to send a message, the user needs `WRITE` permission
        at the Thing level.

        The HTTP request blocks until a response to the message is available
        or until the `timeout` is expired. If many clients respond to
        the issued message, the first response will complete the HTTP request.

        In order to handle the message in a fire and forget manner, add
        a query-parameter `timeout=0` to the request.
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/thingIdPathParam'
        - $ref: '#/components/parameters/featureIdPathPathParam'
        - $ref: '#/components/parameters/messageSubjectPathParam'
        - $ref: '#/components/parameters/messageTimeoutParam'
      responses:
        '202':
          description: The message was sent (fire and forget).
        '400':
          description: |-
            The request could not be completed. The `thingId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or at least one of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller does not have `WRITE` permission on the resource message:/features/`featureId`/outbox/messages/`messageSubject`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '413':
          $ref: '#/components/responses/messageTooLarge'
      requestBody:
        $ref: '#/components/requestBodies/Payload'
  ###
  ### Policies
  ###
  '/policies/{policyId}':
    get:
      summary: Retrieve a specific Policy
      description: |-
        Returns the Policy identified by the `policyId` path parameter. The
        response contains the Policy as JSON object consisting of Policy
        Entries.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: |-
            The request successfully returned completed and returned is the
            Policy.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Policy with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or update a Policy with a specified ID
      description: |-
        Modify the complete Policy identified by the `policyId` path parameter. The `policyId` has to:

          * contain a mandatory namespace prefix (java package notation + `:` colon) - periods (`.`) may be used in namespace but not as first or last character
          * conform to RFC-2396 (URI)

        #### Valid examples

          * `com.bosch.myproject:myPolicy1`
          * `mynamespace:myPolicy1`

        #### Invalid examples

          * `42:myFridge1`
          * `.foo:myFridge1`
          * `bar.:myFridge1`

        The ID of a Policy can't be changed after creation. Any `policyId` specified in the request body is therefore
        ignored.

      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Policy was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Policy resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '204':
          description: The Policy was successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid, or no valid Policy JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying a complete Policy, `WRITE` permission on the resource `policy:/` is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
            example: {}
        description: |-
          JSON representation of the Policy.


          Use the placeholder `{{ request:subjectId }}` in order to let the
          backend insert the authenticated subjectId of the HTTP request.
        required: true
    delete:
      summary: Delete a specific Policy
      description: |-
        Deletes the Policy identified by the `policyId` path parameter. Deleting
        a Policy does not implicitly delete other entities (e.g. Things) which
        use this Policy. Those have to be deleted in advance of deleting the
        Policy.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Policy was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid, or no valid Policy JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting an existing Policy, `WRITE` permission on the resource `policy:/` is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/policies/{policyId}/entries':
    get:
      summary: Retrieve the entries of a specific Policy
      description: |-
        Returns the Policy entries of the Policy identified by the `policyId`
        path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: |-
            The request successfully returned completed and returned are the
            Policy entries.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyEntries'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Policy with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Modify the entries of a specific Policy
      description: |-
        Modify the Policy entries of the Policy identified by the `policyId`
        path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Policy entries were successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid, or no valid Policy entry JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying the Policy entries of an existing Policy, `WRITE` permission on the resource `policy:/entries` is required is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyEntries'
            example: {}
        description: |-
          JSON representation of the Policy entries.


          Use the placeholder `{{ request:subjectId }}` in order to let the
          backend insert the authenticated subjectId of the HTTP request.
        required: true
  '/policies/{policyId}/entries/{label}':
    get:
      summary: Retrieve one Policy entry of a Policy for a specific label
      description: |-
        Returns one Policy entry of the Policy identified by the `policyId` path
        parameter and for the label identified by the `label` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: |-
            The request successfully returned completed and returned is the
            Policy entry.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyEntry'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Policy with the given ID or
            the Policy entry was not found in the context of the authenticated
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or modify one Policy entry of a Policy for a specific label
      description: |-
        Create or modify the Policy entry of the Policy identified by the
        `policyId` path parameter and with the label identified by the `label`
        path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Policy entry was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Policy entry
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyEntry'
        '204':
          description: The Policy entry was successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid, or no valid Policy entry JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying a Policy entry of an existing Policy, `WRITE` permission on the resource `policy:/entries/{label}` is required is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyEntry'
            example: {}
        description: |-
          JSON representation of the Policy entry.


          Use the placeholder `{{ request:subjectId }}` in order to let the
          backend insert the authenticated subjectId of the HTTP request.
        required: true
    delete:
      summary: Delete one Policy entry of a Policy for a specific label
      description: |-
        Deletes the Policy entry of the Policy identified by the `policyId` path
        parameter and with the label identified by the `label` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Policy entry was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting a Policy entry of an existing Policy, `WRITE` permission on the resource `policy:/entries/{label}` is required is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/policies/{policyId}/entries/{label}/subjects':
    get:
      summary: Retrieve all Subjects of a Policy entry
      description: |-
        Returns all Subjects of the Policy entry of the Policy identified by the
        `policyId` path parameter and for the label identified by the `label`
        path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The request successfully returned. The subjects are returned.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subjects'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Policy with the given ID or
            the Policy entry was not found in the context of the authenticated
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or modify all Subjects of a Policy Entry
      description: |-
        Create or modify all Subjects of the Policy entry of the Policy
        identified by the `policyId` path parameter and with the label
        identified by the `label` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Subjects were successfully created or updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid, or no valid Subjects JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying Subjects of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/subjects` is required is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID was
            not found in the context of the authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subjects'
            example: {}
        description: |-
          JSON representation of the Subjects.


          Use the placeholder `{{ request:subjectId }}` in order to let the
          backend insert the authenticated subjectId of the HTTP request.
        required: true
  '/policies/{policyId}/entries/{label}/subjects/{subjectId}':
    get:
      summary: Retrieve one specific Subject of a Policy entry
      description: |-
        Returns the Subject with ID `subjectId` of the Policy entry identified
        by the `label` path parameter belonging to the Policy identified by the
        `policyId` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/subjectIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: |-
            The request successfully returned completed and returned is the
            Subject.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Policy with the given ID,
            the Policy entry or the Subject was not found in the context of the
            authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or modify one specific Subject of a Policy entry
      description: |-
        Create or modify the Subject with ID `subjectId` of the Policy entry
        identified by the `label` path parameter belonging to the Policy
        identified by the `policyId` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/subjectIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Subject was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Subject
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '204':
          description: The Subject was successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid, or no valid Subject JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying a Subject of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/subjects/{subjectId}` is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID or
            the Policy entry was not found in the context of the authenticated
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectEntry'
            example: {}
        description: JSON representation of the Subject
        required: true
    delete:
      summary: Delete one specific Subject of a Policy entry
      description: |-
        Deletes the Subject with ID `subjectId` of the Policy entry identified
        by the `label` path parameter belonging to the Policy identified by the
        `policyId` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/subjectIdPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Subject was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting a Subject of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/subjects/{subjectId}` is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID,
            the Policy entry or the Subject was not found in the context of the
            authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  '/policies/{policyId}/entries/{label}/resources':
    get:
      summary: Retrieve all Resources of a Policy entry
      description: |-
        Returns all Resources of the Policy entry of the Policy identified by
        the `policyId` path parameter and for the label identified by the
        `label` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: The request successfully returned. The resources are returned.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resources'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Policy with the given ID or
            the Policy entry was not found in the context of the authenticated
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or modify all Resources of a Policy Entry
      description: |-
        Create or modify all Resources of the Policy entry of the Policy
        identified by the `policyId` path parameter and with the label
        identified by the `label` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Resources were successfully created or updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid, or no valid Resources JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying Resources of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/resources` is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID or
            the Policy entry was not found in the context of the authenticated
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resources'
            example: {}
        description: JSON representation of the Resources
        required: true
  '/policies/{policyId}/entries/{label}/resources/{resourcePath}':
    get:
      summary: Retrieve one specific Resource of a Policy entry
      description: |-
        Returns the Resource with path `resourcePath` of the Policy entry
        identified by the `label` path parameter belonging to the Policy
        identified by the `policyId` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/resourcePathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '200':
          description: |-
            The request successfully returned completed and returned is the
            Resource.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEntry'
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '404':
          description: |-
            The request could not be completed. The Policy with the given ID,
            the Policy entry or the Resource was not found in the context of the
            authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
    put:
      summary: Create or modify one specific Resource of a Policy entry
      description: |-
        Create or modify the Resource with path `resourcePath` of the Policy
        entry identified by the `label` path parameter belonging to the Policy
        identified by the `policyId` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/resourcePathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '201':
          description: The Resource was successfully created.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
            Location:
              description: The location of the created Resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEntry'
        '204':
          description: The Resource was successfully updated.
          headers:
            ETag:
              description: |-
                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
                "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
              schema:
                type: string
        '304':
          $ref: '#/components/responses/notModified'
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)

            Or the JSON was invalid, or no valid Resource JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For modifying a Resource of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/resources/{resourcePath}` is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID or
            the Policy entry was not found in the context of the authenticated
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
        '413':
          $ref: '#/components/responses/entityTooLarge'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceEntry'
            example: {}
        description: JSON representation of the Resource
        required: true
    delete:
      summary: Delete one Resource of a Policy entry
      description: |-
        Deletes the Resource with path `resourcePath` of the Policy entry
        identified by the `label` path parameter belonging to the Policy
        identified by the `policyId` path parameter.
      tags:
        - Policies
      parameters:
        - $ref: '#/components/parameters/policyIdPathParam'
        - $ref: '#/components/parameters/labelPathParam'
        - $ref: '#/components/parameters/resourcePathPathParam'
        - $ref: '#/components/parameters/ifMatchHeaderParam'
        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'
      responses:
        '204':
          description: The Resource was successfully deleted.
        '400':
          description: |-
            The request could not be completed. The `policyId` either

              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
              * does not conform to RFC-2396 (URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: |-
            The request could not be completed as the caller had insufficient permissions. For deleting a Resource of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/resources/{resourcePath}` is required without having any revoke.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '404':
          description: |-
            The request could not be completed. The Policy with the given ID,
            the Policy entry or the Resource was not found in the context of the
            authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '412':
          $ref: '#/components/responses/preconditionFailed'
  ###
  ### Things-Search
  ###
  /search/things:
    get:
      summary: Search for Things
      description: |-
        This resource can be used to search for things.

        The query parameter `filter` is not mandatory. If it is not set there
        are returned all things which the logged in user is allowed to read. The
        resource supports sorting and paging. If paging is not explicitly
        specified by means of the `limit` option, a default count of `25`
        documents is returned.

        To search for nested properties, we use JSON Pointer notation
        (RFC-6901). See the following example how to search for the sub property
        `location` of the parent property `attributes` with a forward slash as
        separator:

        ```eq(attributes/location,"kitchen")```
      parameters:
        - $ref: '#/components/parameters/searchFilter'
        - $ref: '#/components/parameters/namespacesFilter'
        - $ref: '#/components/parameters/thingFieldsQueryParam'
        - name: option
          in: query
          description: |-
            Possible values for the parameter:

            ###### Sort operations

            * ```sort([+|-]{property})```
            * ```sort([+|-]{property},[+|-]{property},...)```

            ###### Paging operations

            * ```size({page-size})```  Maximum allowed page-size is `200`.
            * ```cursor({cursor-id})```  Start the search from the cursor location. Specify the cursor ID without
            quotation marks. Cursor IDs are given in responses and mark the position after the final search result.
            The meaning of cursor IDs is unspecified and may change without notice.

            The paging option `limit({offset},{count})` is deprecated.
            It may result in slow queries, time-outs and will be removed eventually.

            ##### Examples:

            * ```sort(+thingId)```
            * ```sort(-attributes/manufacturer)```
            * ```sort(+thingId,-attributes/manufacturer)```
            * ```size(10)``` return 10 results
            * ```cursor(LOREMIPSUM)```  return results after the position of the cursor `LOREMIPSUM`.

            ##### Combine:

            If you need to specify multiple options, when using the swagger UI just write each option in a new line.
            When using the plain REST API programmatically,
            you will need to separate the options using a comma (,) character.

            ```size(200),cursor(LOREMIPSUM)```

            The deprecated paging option `limit` may not combine with the other paging options `size` and `cursor`.
          required: false
          schema:
            type: array
            items:
              type: string
      tags:
        - Things-Search
      responses:
        '200':
          description: An array of the matching things.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultThings'
        '400':
          description: |-
            The request could not be completed. A provided parameter was in a
            wrong format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: The request could not be completed due to an invalid authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '504':
          description: The request ran out of time to execute on the the back-end. Optimize your query and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
  /search/things/count:
    get:
      summary: Count Things
      description: |-
        This resource can be used to count things.

        The query parameter `filter` is not mandatory. If it is not set there is
        returned the total amount of things which the logged in user is allowed
        to read.

        To search for nested properties, we use JSON Pointer notation
        (RFC-6901). See the following example how to search for the sub property
        `location` of the parent property `attributes` with a forward slash as
        separator:

        ```eq(attributes/location,"kitchen")```
      parameters:
        - $ref: '#/components/parameters/searchFilter'
        - $ref: '#/components/parameters/namespacesFilter'
      tags:
        - Things-Search
      responses:
        '200':
          description: A number indicating the amount of matched things
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultThingsCount'
        '400':
          description: |-
            The request could not be completed. A provided parameter was in a
            wrong format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '403':
          description: The request could not be completed due to an invalid authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '504':
          description: The request ran out of time to execute on the the back-end. Optimize your query and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
components:
  schemas:
    Error:
      properties:
        status:
          type: integer
          description: The HTTP status of the error
        message:
          type: string
          description: The message of the error - what went wrong
        description:
          type: string
          description: A description how to fix the error or more details
        href:
          type: string
          description: A link to further information about the error and how to fix it
      required:
        - status
        - message
    AdvancedError:
      properties:
        status:
          type: integer
          description: The HTTP status of the error
        error:
          type: string
          description: The error code of the occurred exception
        message:
          type: string
          description: The message of the error - what went wrong
        description:
          type: string
          description: A description how to fix the error or more details
        href:
          type: string
          description: A link to further information about the error and how to fix it
      required:
        - status
        - error
        - message
    Attributes:
      type: object
      description: An arbitrary JSON object.
    FeatureDefinition:
      type: array
      items:
        type: string
        description: "A single fully qualified identifier of a Feature Definition in the form 'namespace:name:version'"
        pattern: ([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+)
    FeatureProperties:
      type: object
      description: An arbitrary JSON object.
    Feature:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/FeatureDefinition'
          description: The Definition of this Feature
        properties:
          $ref: '#/components/schemas/FeatureProperties'
          description: The Properties of this Feature
    SearchResultThings:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Thing'
        cursor:
          type: string
    SearchResultThingsCount:
      type: integer
    NewThing:
      type: object
      properties:
        _policy:
          $ref: '#/components/schemas/Policy'
          description: |-
            The initial Policy to create for this Thing. This will create a separate Policy entity managed by resource `/policies/{thingId}`.


            Use the placeholder `{{ request:subjectId }}` in order to let the backend insert the authenticated subjectId of the HTTP request.
        _copyPolicyFrom:
          type: string
          description: |-
            This field may contain the Policy ID of an existing Policy.
            The Policy is copied and used for this newly created Thing. This field may also contain a placeholder
            reference to a Thing in the format `{{ ref:things/[thingId]/policyId }}` where you need to replace `[thingId]`
            with a valid Thing ID. The newly created Thing will then obtain a copy of the Policy of the referenced Thing.
            In the case of using a reference, the caller needs to have READ access to both the Thing and the Policy of the Thing.
            In the case of using an explicit policy id to copy from, the caller needs to have READ access to the Policy.
            If you want to specify a Policy ID for the copied policy, use the policyId field.
            This field must not be used together with the field `_policy`. If you specify both `_policy` and
            `_copyPolicyFrom` this will lead to an error response.
        policyId:
          type: string
          description: |-
            The Policy ID used for controlling access to this Thing. Managed by
            resource `/policies/{policyId}`.
        attributes:
          $ref: '#/components/schemas/Attributes'
          description: The attributes of this Thing
        features:
          $ref: '#/components/schemas/Features'
          description: The Features of this Thing
    Thing:
      type: object
      required:
        - thingId
        - policyId
        - attributes
        - features
      properties:
        thingId:
          type: string
          description: Unique identifier representing the thing
        policyId:
          type: string
          description: The policy ID used for controlling access to this thing, managed by resource `/policies/{policyId}`
        attributes:
          $ref: '#/components/schemas/Attributes'
          description: The attributes of this thing
        features:
          $ref: '#/components/schemas/Features'
          description: The features of this thing
    Policy:
      type: object
      description: Policy consisting of PolicyEntries
      properties:
        entries:
          $ref: '#/components/schemas/PolicyEntries'
    PolicyEntries:
      type: object
      description: PolicyEntries containing one PolicyEntry for each arbitrary `label` key
      properties:
        label1:
          $ref: '#/components/schemas/PolicyEntry'
        labelN:
          $ref: '#/components/schemas/PolicyEntry'
    PolicyEntry:
      type: object
      description: Single Policy entry containing Subjects and Resources.
      required:
        - subjects
        - resources
      properties:
        subjects:
          $ref: '#/components/schemas/Subjects'
        resources:
          $ref: '#/components/schemas/Resources'
    Subjects:
      type: object
      description: |-
        (Authorization) Subjects containing one SubjectEntry for each arbitrary
        `issuer:subjectId` key. `issuer` being one of the following
        `iot-permissions`, `iot-things`
      properties:
        'iot-permissions:subjectId1':
          $ref: '#/components/schemas/SubjectEntry'
        'iot-permissions:subjectIdN':
          $ref: '#/components/schemas/SubjectEntry'
    SubjectEntry:
      type: object
      description: Single (Authorization) Subject entry holding its type.
      required:
        - type
      properties:
        type:
          type: string
          description: the type of the (Authorization) Subject
          enum:
            - iot-permissions-sid
            - iot-permissions-userid
            - iot-permissions-groupid
            - iot-permissions-roleid
            - iot-things-clientid
            - jwt
    Resources:
      type: object
      description: |-
        (Authorization) Resources containing one ResourceEntry for each
        `type:path` key, `type` being one of the following `thing`, `policy`,
        `message`
      properties:
        'thing:/':
          $ref: '#/components/schemas/ResourceEntry'
        'thing:/attributes/some/path':
          $ref: '#/components/schemas/ResourceEntryRestricted'
        'policy:/':
          $ref: '#/components/schemas/ResourceEntry'
        'message:/':
          $ref: '#/components/schemas/ResourceEntry'
    ResourceEntry:
      type: object
      description: |-
        Single (Authorization) Resource entry defining permissions per effect.
        Allowed effects are `grant` and `revoke`.
      properties:
        grant:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        revoke:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    ResourceEntryRestricted:
      type: object
      description: |-
        Single (Authorization) Resource entry defining permissions per effect.
        Allowed effects are `grant` and `revoke`.
      properties:
        grant:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        revoke:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    Permission:
      type: string
      description: A Permission allows a certain action on an entity
      enum:
        - READ
        - WRITE
    Features:
      type: object
      description: |-
        List of Features where the key represents the `featureId` of each Feature.
        The `featureId` key must be unique in the list.
      additionalProperties:
        $ref: '#/components/schemas/Feature'
    TagTopologyResponse:
      type: object
      properties:
        tag:
          type: string
          description: Tag name of the saved Topology snapshot.
        tagTimestamp:
          type: string
          description: Timestamp of the saved Topology snapshot.
    GraphQLExecutionError:
      type: object
      properties:
        status:
          type: integer
          description: The HTTP status of unprocessable entity (422)
        error:
          type: string
          description: |-
            The error code of GraphQL execution error
            `"topologoes:graphql.execution.error"`
        message:
          type: string
          description: |-
            A description of what happened `"GraphQL execution failed with
            errors."`
        graphql_errors:
          type: array
          items:
            type: string
          description: A list of error messages from the GraphQL engine.
      required:
        - status
        - error
        - message
        - graphql_errors
    GraphQLRequest:
      type: object
    GraphQLResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          description: The result of the GraphQL query.
    GraphQLSchema:
      type: string
      description: The GraphQL schema.
      example: |
        schema @expand(template: "Topology") { query: Ignored }

        type Campus implements Topology {
        id:         ID!
        campusName: String
        buildings:  [Building]
        companies:  [Company]
        }

        type Building implements Referenceable {
          buildingName: String
          rooms:        [Room]
        }

        type Room implements Referenceable {
          roomName: String
          area:     Float
        }

        type Company {
          name:  String
          units: [Referenceable]
        }
    Topology:
      type: object
      required:
        - topologyId
        - policyId
        - schemaId
      properties:
        topologyId:
          type: string
          description: The ID of the Topology.
        policyId:
          type: string
          description: |-
            The Policy ID used for controlling access to this Topology. Managed by
            resource `/policies/{policyId}`.
        schemaId:
          type: string
          description: |-
            The Topology Schema ID defining this Topology. Managed by resource `/topology-schemas/{schemaId}`.
    NewTopology:
      type: object
      required:
        - policyId
        - schemaId
      properties:
        policyId:
          type: string
          description: |-
            The Policy ID used for controlling access to this Topology. Managed by
            resource `/policies/{policyId}`.
        schemaId:
          type: string
          description: |-
            The Topology Schema ID defining this Topology. Managed by
            resource `/topology-schemas/{schemaId}`.
        _content:
          $ref: '#/components/schemas/NewTopologyContent'
    NewTopologyContent:
      type: object
      properties:
        query:
          type: string
          description: Only `create` mutation allowed here.
        variables:
          type: object
    NewTopologyResponse:
      type: object
      required:
        - topologyId
        - policyId
        - schemaId
      properties:
        topologyId:
          type: string
          description: The ID of the modified Topology.
        policyId:
          type: string
          description: |-
            The Policy ID used for controlling access to this Topology. Managed by
            resource `/policies/{policyId}`.
        schemaId:
          type: string
          description: |-
            The Topology Schema ID defining this Topology. Managed by
            resource `/topology-schemas/{schemaId}`.
        data:
          type: object
          description: GraphQL operation result if `_content` was provided with the request body.
    SearchResultTopologies:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Topology'
    TopologySchema:
      type: object
      required:
        - schemaId
        - policyId
      properties:
        schemaId:
          type: string
          description: The ID of the Topology Schema.
        policyId:
          type: string
          description: |-
            The Policy ID used for controlling access to this Topology Schema. Managed by
            resource `/policies/{policyId}`.
        content:
          $ref: '#/components/schemas/GraphQLSchema'
    NewTopologySchema:
      type: object
      required:
        - schemaId
        - policyId
      properties:
        schemaId:
          type: string
          description: The ID of the Topology Schema.
        policyId:
          type: string
          description: |-
            The Policy ID used for controlling access to this Topology Schema. Managed by
            resource `/policies/{policyId}`.
        content:
          $ref: '#/components/schemas/GraphQLSchema'
    NewTopologySchemaResponse:
      type: object
      required:
        - schemaId
        - policyId
      properties:
        schemaId:
          type: string
          description: The ID of the modified Topology Schema.
        policyId:
          type: string
          description: |-
            The Policy ID used for controlling access to this Topology Schema. Managed by
            resource `/policies/{policyId}`.
        content:
          $ref: '#/components/schemas/GraphQLSchema'

  responses:
    entityTooLarge:
      description: |-
        The created or modified entity is larger than the accepted limit of 100 kB.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdvancedError'
    messageTooLarge:
      description: |-
        The size of the send message is larger than the accepted limit of 250 kB.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdvancedError'
    notModified:
      description: |-
        The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which
         matches the current ETag of the (sub-)resource.
      headers:
        ETag:
          description: |-
            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
            "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
          schema:
            type: string
    preconditionFailed:
      description: |-
        A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, when you
        specified an If-Match or If-None-Match header which fails the precondition check against the current ETag of
        the (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a
        failing If-None-Match header for a read request, status 304 will be returned instead.
      headers:
        ETag:
          description: |-
            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
            "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdvancedError'

  parameters:
    ifMatchHeaderParam:
      name: If-Match
      in: header
      description:  >-
        The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:
          * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: "rev:4711"`
          * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`
      required: false
      schema:
        type: string
    ifNoneMatchHeaderParam:
      name: If-None-Match
      in: header
      description:  >-
        The `If-None-Match` header which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to
        modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.
      required: false
      schema:
        type: string
    featureIdPathPathParam:
      name: featureId
      in: path
      description: The ID of the Feature - has to conform to RFC-2396 (URI)
      required: true
      schema:
        type: string
    attributePathPathParam:
      name: attributePath
      in: path
      description: The path to the Attribute
      required: true
      schema:
        type: string
    thingIdPathParam:
      name: thingId
      in: path
      description: |-
        The ID of the Thing - has to:

          * contain the mandatory namespace prefix (java package notation + `:` colon)
          * conform to RFC-2396 (URI)
      required: true
      schema:
        type: string
    policyIdPathParam:
      name: policyId
      in: path
      description: |-
        The ID of the Policy - has to:

          * contain the mandatory namespace prefix (java package notation + `:` colon)
          * conform to RFC-2396 (URI)
      required: true
      schema:
        type: string
    topologyIdPathParam:
      name: topologyId
      in: path
      description: |-
        The ID of the Topology - has to:
         * contain the mandatory namespace prefix (java package notation + `:` colon)
         * conform to RFC-2396 (URI)
      required: true
      schema:
        type: string
    topologyTagPathParam:
      name: tagId
      in: path
      description: |-
        A Tag of a Topology - has to:

          * contain 0 or more unreserved URI characters (letters, digits, `-`, `.`, `_`, `~`)
           * `1.1`
           * `~topo-1_MILESTONE`

          * Invalid examples:
           * `%22topo:logy/+5`
           * `!(x=42+y=z)`
      required: true
      schema:
        type: string
    topologyTagQueryParam:
      name: tag
      in: query
      description: |-
        A tag of a topology - has to:

          * contain 1 or more unreserved URI characters (letters, digits, `-`, `.`, `_`, `~`)
           * `1.1`
           * `topo1-MILESTONE`

          * Invalid examples:
           * `%22topo:logy/+5`
           * `topo?x=42&y=x`
      required: false
      schema:
        type: string
    topologyTimestampQueryParam:
      name: tag_timestamp
      in: query
      description: |-
        Timestamp of a Topology tagged in the past - has to:

        * conform to the ISO 8601 calendar date and time format with mandatory
        time zone designation.
          The date must be a fully specified calendar date. Week and ordinal dates are not supported. The time may be
          accurate up to hours, minutes, seconds or milliseconds. The separator `T` between the date and the time is
          mandatory. We support both the expanded format `YYYY-MM-DDThh:mm:ss.sTZD` and the basic format
          `YYYYMMDDThhmmss.sTZD`, where `TZD` is a URL-encoded time zone designator (`Z`, `%2Bhh:mm`, `-hh:mm`,
          `%2Bhhmm`, or `-hhmm`).

          Valid examples are:
             * `2017-01-03T10:15:30.013Z`
             * `20170103T101530.013Z`
             * `2017-02-03T10:15:30%2B01:00`
             * `2017-02-03T10:15:30-01:00`
      required: false
      schema:
        type: string
    topologyQueryQueryParam:
      name: query
      in: query
      description: |-
        A URL-encoded GraphQL query string. Suitable for small queries only: The
        size of the entire URL should not exceed 8 kilobyte.
      required: true
      schema:
        type: string
    topologyVariablesQueryParam:
      name: variables
      in: query
      description: |-
        A URL-encoded JSON object containing exactly the variables used in the
        GraphQL query.
      required: false
      schema:
        type: string
    topologyOperationNameQueryParam:
      name: operationName
      in: query
      required: false
      description: |-
        If several named operations are defined in a GraphQL query, this parameter
        names the operation to be executed.
      schema:
        type: string
    schemaIdPathParam:
      name: schemaId
      in: path
      description: |-
        The ID of the Schema:

          * has to follow the pattern `namespace`:`name`:`version`
          * `namespace` must conform to java package notation
          * `name` and `version` must conform to RFC-2396 (URI)
      required: true
      schema:
        type: string
    schemaFieldsQueryParam:
      name: fields
      in: query
      description: |-
        Contains a comma separated list of fields to be included in the returned JSON.

        #### Selectable fields

        * `schemaId`

        * `policyId`

        * `content`

        * `_revision`

          Specifically selects the revision of the Schema. The revision is a counter which is incremented on each
          modification of a Schema.

        #### Example

        * `?fields=schemaId,_revision`
      required: false
      schema:
        type: string
    topologyFieldsQueryParam:
      name: fields
      in: query
      description: |-
        Contains a comma separated list of fields to be included in the returned JSON.

        #### Selectable fields

        * `topologyId`

        * `policyId`

        * `schemaId`

        * `_revision`

          Specifically selects the revision of the Topology. The revision is a counter which is incremented on each
          modification of a Topology.

        #### Example

        * `?fields=topologyId,_revision`
      required: false
      schema:
        type: string
    messageSubjectPathParam:
      name: messageSubject
      in: path
      description: The subject of the Message - has to conform to RFC-2396 (URI)
      required: true
      schema:
        type: string
    messageClaimTimeoutParam:
      name: timeout
      in: query
      description: |-
        Contains an optional timeout (in seconds) of how long to wait for the Claim response and therefore block the
        HTTP request. Default value (if omitted): 60 seconds. Maximum value: 600 seconds. A value of 0 seconds applies
        fire and forget semantics for the message.
      required: false
      schema:
        type: integer
    messageTimeoutParam:
      name: timeout
      in: query
      description: |-
        Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the
        HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies
        fire and forget semantics for the message.
      required: false
      schema:
        type: integer


    labelPathParam:
      name: label
      in: path
      description: The label of a Policy entry
      required: true
      schema:
        type: string
    subjectIdPathParam:
      name: subjectId
      in: path
      description: The ID of an (Authorization) Subject
      required: true
      schema:
        type: string
    resourcePathPathParam:
      name: resourcePath
      in: path
      description: The path of an (Authorization) Resource
      required: true
      schema:
        type: string
    propertyPathPathParam:
      name: propertyPath
      in: path
      description: The path to the Property
      required: true
      schema:
        type: string
    thingFieldsQueryParam:
      name: fields
      in: query
      description: |-
        Contains a comma separated list of fields to be included in the returned
        JSON. Attributes can be selected in the same manner.

        #### Selectable fields

        * `thingId`

        * `policyId`

        * `_policy`

         Specifically selects the policy of the Thing. (The policy is not contained in the returned JSON per default.)

        * `attributes`

          Supports selecting arbitrary sub-fields by using a comma separated list:
            * several attribute paths can be passed as a comma separated list of JSON pointers (RFC-6901)

              For example:
                * `?fields=attributes/model` would select only `model` attribute value (if present)
                * `?fields=attributes/model,attributes/make` would select only `model` and `make` attribute values (if present)

          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
            * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield

              For example:
               * `?fields=attributes(model,make)` would select only `model` and `make` attribute values (if present)
               * `?fields=attributes(location/longitude)` would select the `longitude` value inside the `location` object
               * `?fields=attributes/address/postal(city,street)` would select the `city` and `street` values inside the `postal` object inside the `address` object


        * `features`

          Supports selecting arbitrary fields in features similar to `attributes` (see also Features documentation for more details)

        * `_namespace`

          Specifically selects the namespace also contained in the `thingId`

        * `_revision`

          Specifically selects the revision of the Thing. The revision is a counter which is incremented on each modification of a Thing.

        * `_modified`

          Specifically selects the modified timestamp of the Thing in ISO-8601 UTC format. The timestamp is set on each modification of a Thing.

        #### Examples

        * `?fields=thingId,attributes,features`

        * `?fields=attributes(model,make),features`

        *
        `?fields=thingId,attributes/location/longitude,attributes/address(city,street)`
      required: false
      schema:
        type: string
    attributesFieldsQueryParam:
      name: fields
      in: query
      description: |-
        Contains a comma separated list of fields from the attributes to be
        included in the returned JSON.

        #### Selectable fields

        Supports selecting arbitrary sub-fields as defined in the attributes by
        using a comma separated list:
          * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)

            For example:
              * `?fields=model` would select only `model` attribute value (if present)
              * `?fields=model,make` would select only `model` and `make` attribute values (if present)

        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields
        inside parentheses `( )`:
          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield

            For example:
             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` attribute

        #### Examples

        * `?fields=model,make,location(longitude,latitude)`

        * `?fields=listOfAddresses/postal(city,street))`
      required: false
      schema:
        type: string
    propertiesFieldsQueryParam:
      name: fields
      in: query
      description: |-
        Contains a comma separated list of fields from the properties to be
        included in the returned JSON.

        #### Selectable fields

        Supports selecting arbitrary sub-fields as defined in the properties by
        using a comma separated list:
          * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)

            For example:
              * `?fields=temperature` would select only `temperature` property value (if present)
              * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values (if present)

        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields
        inside parentheses `( )`:
          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield

            For example:
             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property

        #### Examples

        * `?fields=temperature,humidity,location(longitude,latitude)`

        * `?fields=configuration,status(powerConsumption/watts)`
      required: false
      schema:
        type: string
    featuresFieldsQueryParam:
      name: fields
      in: query
      description: |-
        Contains a comma separated list of fields from one or more Features to be
        included in the returned JSON.

        #### Selectable fields

        * `{featureId}` The ID of the Feature to select properties in

          * `properties`

            Supports selecting arbitrary sub-fields by using a comma separated list:
              * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)

                For example:
                  * `?fields={featureId}/properties/color` would select only `color` property value (if present) of the Feature identified with `{featureId}`
                  * `?fields={featureId}/properties/color,properties/brightness` would select only `color` and `brightness` property values (if present) of the Feature identified with `{featureId}`

            Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
              * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
              * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield

                For example:
                 * `?fields={featureId}/properties(color,brightness)` would select only `color` and `brightness` property values (if present) of the Feature identified with `{featureId}`
                 * `?fields={featureId}/properties(location/longitude)` would select the `longitude` value inside the `location` object of the Feature identified with `{featureId}`


        #### Examples

        * `?fields=EnvironmentScanner/properties(temperature,humidity)`

        *
        `?fields=EnvironmentScanner/properties(temperature,humidity),Vehicle/properties/configuration`
      required: false
      schema:
        type: string
    featureFieldsQueryParam:
      name: fields
      in: query
      description: |-
        Contains a comma separated list of fields from the selected Feature to be
        included in the returned JSON.

        #### Selectable fields

        * `properties`

          Supports selecting arbitrary sub-fields by using a comma separated list:
            * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)

              For example:
                * `?fields=properties/color` would select only `color` property value (if present)
                * `?fields=properties/color,properties/brightness` would select only `color` and `brightness` property values (if present)

          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:
            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select
            * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield

              For example:
               * `?fields=properties(color,brightness)` would select only `color` and `brightness` property values (if present)
               * `?fields=properties(location/longitude)` would select the `longitude` value inside the `location` object

        #### Examples

        * `?fields=properties(color,brightness)`
      required: false
      schema:
        type: string
    searchFilter:
      name: filter
      in: query
      description: |-

        ##### Filter operations:

        * ```eq({property},{value})```

        * ```ne({property},{value})```

        * ```gt({property},{value})```

        * ```ge({property},{value})```

        * ```lt({property},{value})```

        * ```le({property},{value})```

        * ```in({property},{value},{value},...)```

        * ```like({property},{value})```

        * ```exists({property})```


        Note: When using filter operations, only things with the specified properties are returned.
        For example, the filter `ne(attributes/owner, "SID123")` will only return things that do have
        the `owner` attribute.


        ##### Logical operations:


        * ```and({query},{query},...)```

        * ```or({query},{query},...)```

        * ```not({query})```


        ##### Examples:

        * ```eq(attributes/location,"kitchen")```

        * ```exists(features/featureId)```

        * ```and(eq(attributes/location,"kitchen"),eq(attributes/color,"red"))```

        * ```or(eq(attributes/location,"kitchen"),eq(attributes/location,"living-room"))```
      required: false
      schema:
        type: string
    namespacesFilter:
      name: namespaces
      in: query
      description: |-
        A comma separated list of namespaces. This list is used to limit the query to things in the given namespaces
        only. When this parameter is omitted, all namespaces will be queried.


        #### Examples:

        * `?namespaces=com.example.namespace`

        * `?namespaces=com.example.namespace1,com.example.namespace2`
      required: false
      schema:
        type: string

  requestBodies:
    Payload:
      content:
        application/json:
          schema:
            type: string
            example: ''
        application/octet-stream:
          schema:
            type: string
            example: ''
        text/plain:
          schema:
            type: string
            example: ''
      description: |-
        Payload of the message with max size of 250 kB. It can be any HTTP
        supported content, including binary content.
    Attributes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attributes'
          example: {}
      description: |-
        JSON object of all Attributes to be modified at once. Consider that the
        value has to be a JSON object or `null`, examples:

          * an object: `{ "key": "value"}` -} We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*
          * an empty object: `{}`
      required: true
    Value:
      content:
        application/json:
          schema:
            type: object
            example: {}
      description: |-
        JSON representation of the value to be created/updated. This may be as
        well `null` or an empty object.

        Consider that the value has to be a JSON value, examples:

          * for a number, the JSON value is the number: `42`

          * for a string, the JSON value must be quoted: `"aString"`

          * for a boolean, the JSON value is the boolean: `true`

          * for an object, the JSON value is the object: `{ "key": "value"}` -} We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\-]*

          * for an list, the JSON value is the list: `[ 1,2,3 ]`
      required: true

  securitySchemes:
    basicAuth:
      type: http
      description: |-
        Eclipse Ditto sandbox demo user (demo1 ... demo9) + password (demo)
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        A JSON Web Token issued by a supported OAuth 2.0 Identity Provider, e.g. a Google "id_token"
