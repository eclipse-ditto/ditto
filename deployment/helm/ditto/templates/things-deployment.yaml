# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
{{- if .Values.things.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ditto.fullname" . }}-things
  labels:
    app.kubernetes.io/name: {{ include "ditto.name" . }}-things
{{ include "ditto.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.things.replicaCount }}
  strategy:
  {{- with .Values.things.updateStrategy }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
  minReadySeconds: {{ .Values.things.minReadySeconds }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "ditto.name" . }}-things
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "ditto.name" . }}-things
        app.kubernetes.io/instance: {{ .Release.Name }}
        actorSystemName: {{ .Values.pekko.actorSystemName }}
        {{- with .Values.things.additionalLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.global.prometheus.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "{{ .Values.global.prometheus.path }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        {{- end }}
        checksum/mongodb-config: {{ include (print $.Template.BasePath "/mongodb-secret.yaml") . | sha256sum }}
        {{- with .Values.things.additionalAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.rbac.enabled }}
      serviceAccountName: {{ template "ditto.serviceAccountName" . }}
      {{- end }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        fsGroup: 1000
      initContainers:
        {{- if .Values.global.logging.logFiles.enabled }}
        - name: change-volume-owner
          image: busybox
          securityContext:
            runAsUser: 0
          command: [ "sh", "-c", "chown -R 1000:1000 /var/log/ditto && echo 'changed ownership of /var/log/ditto to 1000:1000'" ]
          volumeMounts:
            - name: ditto-log-files-directory
              mountPath: /var/log/ditto
        {{- end }}
      topologySpreadConstraints:
        - maxSkew: {{ .Values.things.topologySpreadConstraints.maxSkew }}
          topologyKey: {{ .Values.things.topologySpreadConstraints.topologyKey }}
          whenUnsatisfiable: {{ .Values.things.topologySpreadConstraints.whenUnsatisfiable }}
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: {{ include "ditto.name" . }}-things
      containers:
        - name: {{ .Chart.Name }}-things
          image: {{ printf "%s:%s" .Values.things.image.repository ( default .Chart.AppVersion ( default .Values.dittoTag .Values.things.image.tag ) ) }}
          imagePullPolicy: {{ .Values.things.image.pullPolicy }}
          env:
            {{- if not .Values.global.logging.customConfigFile.enabled }}
            - name: DITTO_LOGGING_DISABLE_SYSOUT_LOG
              value: "{{ if .Values.global.logging.sysout.enabled }}false{{ else }}true{{ end }}"
            - name: DITTO_LOGGING_FILE_APPENDER
              value: "{{ if .Values.global.logging.logFiles.enabled }}true{{ else }}false{{ end }}"
            {{- end }}
            - name: DITTO_TRACING_ENABLED
              value: "{{ .Values.global.tracing.enabled }}"
            - name: DITTO_TRACING_OTEL_TRACE_REPORTER_ENABLED
              value: "{{ .Values.global.tracing.otelTraceReporterEnabled }}"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "{{ tpl .Values.global.tracing.otelExporterOtlpEndpoint . }}"
            - name: DITTO_TRACING_SAMPLER
              value: "{{ .Values.global.tracing.sampler }}"
            - name: DITTO_TRACING_RANDOM_SAMPLER_PROBABILITY
              value: "{{ .Values.global.tracing.randomSampler.probability }}"
            - name: DITTO_TRACING_ADAPTIVE_SAMPLER_THROUGHPUT
              value: "{{ .Values.global.tracing.adaptiveSampler.throughput }}"
            {{- if .Values.global.logging.logstash.enabled }}
            - name: DITTO_LOGGING_LOGSTASH_SERVER
              value: "{{ .Values.global.logging.logstash.endpoint }}"
            {{- end }}
            - name: POD_LABEL_SELECTOR
              value: "app.kubernetes.io/name=%s"
            - name: POD_NAMESPACE
              value: {{.Release.Namespace}}
            - name: INSTANCE_INDEX
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: DISCOVERY_METHOD
              value: "kubernetes-api"
            - name: TZ
              value: "{{ .Values.global.timezone }}"
            - name: JAVA_TOOL_OPTIONS
              value: >
                {{ .Values.global.jvmOptions }}
                -XX:ActiveProcessorCount={{ .Values.things.jvm.activeProcessorCount }}
                -XX:MaxRAMPercentage={{ .Values.things.jvm.heapRamPercentage }}
                -XX:InitialRAMPercentage={{ .Values.things.jvm.heapRamPercentage }}
                -XX:MaxGCPauseMillis={{ .Values.things.jvm.maxGcPauseMillis }}
                {{ .Values.things.additionalJvmOptions }}
                {{ .Values.global.pekkoOptions }}
                {{- if .Values.global.logging.customConfigFile.enabled }}
                -Dlogback.configurationFile=/opt/ditto/{{ .Values.global.logging.customConfigFile.fileName }}
                {{- end }}
                {{- range $index, $header := .Values.things.config.persistence.events.historicalHeadersToPersist }}
                "{{ printf "%s%d=%s" "-Dditto.things.thing.event.historical-headers-to-persist." $index $header }}"
                {{- end }}
                {{- range $grantIdx, $grant := .Values.things.config.entityCreation.grants }}
                "{{ printf "%s%d%s=%s" "-Dditto.entity-creation.grant." $grantIdx ".resource-types.0" "thing" }}"
                {{- range $namespaceIdx, $namespace := $grant.namespaces }}
                "{{ printf "%s%d%s%d=%s" "-Dditto.entity-creation.grant." $grantIdx ".namespaces." $namespaceIdx $namespace }}"
                {{- end }}
                {{- range $subjectIdx, $subject := $grant.authSubjects }}
                "{{ printf "%s%d%s%d=%s" "-Dditto.entity-creation.grant." $grantIdx ".auth-subjects." $subjectIdx $subject }}"
                {{- end }}
                {{- end }}
                {{- range $revokeIdx, $revoke := .Values.things.config.entityCreation.revokes }}
                "{{ printf "%s%d%s=%s" "-Dditto.entity-creation.revoke." $revokeIdx ".resource-types.0" "thing" }}"
                {{- range $namespaceIdx, $namespace := $revoke.namespaces }}
                "{{ printf "%s%d%s%d=%s" "-Dditto.entity-creation.revoke." $revokeIdx ".namespaces." $namespaceIdx $namespace }}"
                {{- end }}
                {{- range $subjectIdx, $subject := $revoke.authSubjects }}
                "{{ printf "%s%d%s%d=%s" "-Dditto.entity-creation.revoke." $revokeIdx ".auth-subjects." $subjectIdx $subject }}"
                {{- end }}
                {{- end }}
                '-Dditto.things.wot.to-thing-description.json-template={{ .Values.things.config.wot.tdJsonTemplate | replace "\n" "" | replace "\\\"" "\"" }}'
                {{ join " " .Values.things.systemProps }}
            - name: MONGO_DB_SSL_ENABLED
              value: "{{ if .Values.dbconfig.things.ssl }}true{{ else }}false{{ end }}"
            - name: MONGO_DB_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbconfig.uriSecret | default ( printf "%s-mongodb-secret" ( include "ditto.fullname" . )) }}
                  key: things-uri
            - name: MONGO_DB_CONNECTION_MIN_POOL_SIZE
              value: "{{ .Values.things.config.mongodb.minPoolSize }}"
            - name: MONGO_DB_CONNECTION_POOL_SIZE
              value: "{{ .Values.things.config.mongodb.maxPoolSize }}"
            - name: MONGO_DB_CONNECTION_POOL_IDLE_TIME
              value: "{{ .Values.things.config.mongodb.maxPoolIdleTime }}"
            {{- if .Values.global.prometheus.enabled }}
            - name: PROMETHEUS_PORT
              value: "{{ .Values.global.prometheus.port }}"
            {{- end }}
            - name: CLUSTER_BS_REQUIRED_CONTACTS
              value: "{{ .Values.global.cluster.requiredContactPoints }}"
            - name: DITTO_DDATA_NUMBER_OF_SHARDS
              value: "{{ .Values.global.cluster.ddata.numberOfShards }}"
            - name: DITTO_DDATA_MAX_DELTA_ELEMENTS
              value: "{{ .Values.global.cluster.ddata.maxDeltaElements }}"
            - name: CLUSTER_NUMBER_OF_SHARDS
              value: "{{ .Values.global.cluster.numberOfShards }}"
            - name: CLUSTER_DOWNING_STABLE_AFTER
              value: "{{ .Values.global.cluster.downingStableAfter }}"
            - name: CLUSTER_DOWNING_DOWN_ALL_WHEN_UNSTABLE
              value: "{{ .Values.global.cluster.downAllWhenUnstable }}"
            - name: REMOTE_MAX_FRAMESIZE
              value: "{{ .Values.global.limits.clusterMaxFramesize }}"
            - name: LIMITS_THINGS_MAX_SIZE
              value: "{{ .Values.global.limits.thingsMaxSize }}"
            - name: LIMITS_POLICIES_MAX_SIZE
              value: "{{ .Values.global.limits.policiesMaxSize }}"
            - name: LIMITS_POLICIES_MAX_IMPORTS
              value: "{{ .Values.global.limits.policiesMaxImports }}"
            - name: LIMITS_MESSAGES_MAX_SIZE
              value: "{{ .Values.global.limits.messagesMaxSize }}"
            - name: LIMITS_MESSAGES_HEADERS_SIZE
              value: "{{ .Values.global.limits.maxHeadersSize }}"
            - name: LIMITS_MESSAGES_AUTH_SUBJECTS_COUNT
              value: "{{ .Values.global.limits.maxAuthSubjectsCount }}"
            - name: PEKKO_PERSISTENCE_MONGO_JOURNAL_WRITE_CONCERN
              value: "{{ .Values.things.config.mongodb.journalWriteConcern }}"
            - name: PEKKO_PERSISTENCE_MONGO_SNAPS_WRITE_CONCERN
              value: "{{ .Values.things.config.mongodb.snapsWriteConcern }}"
            - name: BREAKER_MAXTRIES
              value: "{{ .Values.things.config.mongodb.journalCircuitBreaker.maxTries }}"
            - name: BREAKER_TIMEOUT
              value: "{{ .Values.things.config.mongodb.journalCircuitBreaker.timeout }}"
            - name: BREAKER_RESET
              value: "{{ .Values.things.config.mongodb.journalCircuitBreaker.reset }}"
            - name: SNAPSHOT_BREAKER_MAXTRIES
              value: "{{ .Values.things.config.mongodb.snapsCircuitBreaker.maxTries }}"
            - name: SNAPSHOT_BREAKER_TIMEOUT
              value: "{{ .Values.things.config.mongodb.snapsCircuitBreaker.timeout }}"
            - name: SNAPSHOT_BREAKER_RESET
              value: "{{ .Values.things.config.mongodb.snapsCircuitBreaker.reset }}"
            - name: THING_ACTIVITY_CHECK_INTERVAL
              value: "{{ .Values.things.config.persistence.activityCheckInterval }}"
            - name: HEALTH_CHECK_METRICS_REPORTER_RESOLUTION
              value: "{{ .Values.things.config.cleanup.metricsReporter.resolution }}"
            - name: HEALTH_CHECK_METRICS_REPORTER_HISTORY
              value: "{{ .Values.things.config.cleanup.metricsReporter.history }}"
            - name: CLEANUP_ENABLED
              value: "{{ .Values.things.config.cleanup.enabled }}"
            - name: CLEANUP_QUIET_PERIOD
              value: "{{ .Values.things.config.cleanup.quietPeriod }}"
            - name: CLEANUP_HISTORY_RETENTION_DURATION
              value: "{{ .Values.things.config.cleanup.history.retentionDuration }}"
            - name: CLEANUP_INTERVAL
              value: "{{ .Values.things.config.cleanup.interval }}"
            - name: CLEANUP_TIMER_THRESHOLD
              value: "{{ .Values.things.config.cleanup.timerThreshold }}"
            - name: CLEANUP_CREDITS_PER_BATCH
              value: "{{ .Values.things.config.cleanup.creditsPerBatch }}"
            - name: CLEANUP_DELETE_FINAL_DELETED_SNAPSHOT
              value: "{{ .Values.things.config.cleanup.deleteFinalDeletedSnapshot }}"
            - name: THING_SNAPSHOT_INTERVAL
              value: "{{ .Values.things.config.persistence.snapshots.interval }}"
            - name: THING_SNAPSHOT_THRESHOLD
              value: "{{ .Values.things.config.persistence.snapshots.threshold }}"
            - name: DITTO_POLICIES_ENFORCER_CACHE_ENABLED
              value: "{{ .Values.things.config.policiesEnforcer.cache.enabled }}"
            - name: DITTO_POLICIES_ENFORCER_CACHE_MAX_SIZE
              value: "{{ .Values.things.config.policiesEnforcer.cache.maxSize }}"
            - name: DITTO_POLICIES_ENFORCER_CACHE_EXPIRE_AFTER_WRITE
              value: "{{ .Values.things.config.policiesEnforcer.cache.expireAfterWrite }}"
            - name: DITTO_POLICIES_ENFORCER_CACHE_EXPIRE_AFTER_ACCESS
              value: "{{ .Values.things.config.policiesEnforcer.cache.expireAfterAccess }}"
            - name: THINGS_WOT_TO_THING_DESCRIPTION_BASE_PREFIX
              value: "{{ .Values.things.config.wot.tdBasePrefix }}"
            {{- if .Values.things.extraEnv }}
              {{- toYaml .Values.things.extraEnv | nindent 12 }}
            {{- end }}
          ports:
            - name: remoting
              containerPort: {{ .Values.pekko.remoting.port }}
              protocol: TCP
            - name: management
              containerPort: {{ .Values.pekko.mgmthttp.port }}
              protocol: TCP
            {{- if .Values.global.prometheus.enabled }}
            - name: prometheus
              protocol: TCP
              containerPort: {{ .Values.global.prometheus.port }}
            {{- end }}
          readinessProbe:
            httpGet:
              port: management
              path: /ready
            initialDelaySeconds: {{ .Values.things.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.things.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.things.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.things.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.things.readinessProbe.failureThreshold }}
          livenessProbe:
            httpGet:
              port: management
              path: /alive
            initialDelaySeconds: {{ .Values.things.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.things.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.things.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.things.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.things.livenessProbe.failureThreshold }}
          volumeMounts:
            {{- if .Values.global.logging.customConfigFile.enabled }}
            - name: ditto-custom-log-config
              mountPath: /opt/ditto/{{ .Values.global.logging.customConfigFile.fileName }}
              subPath: {{ .Values.global.logging.customConfigFile.fileName }}
            {{- end }}
            {{- if .Values.global.logging.logFiles.enabled }}
            - name: ditto-log-files-directory
              mountPath: /var/log/ditto
            {{- end }}
          resources:
            requests:
              cpu: {{ mulf .Values.things.resources.cpu 1000 }}m
              memory: {{ .Values.things.resources.memoryMi }}Mi
            limits:
              # ## no cpu limit to avoid CFS scheduler limits
              # ref: https://pekko.apache.org/docs/pekko/current/additional/deploying.html#deploying-to-kubernetes
              # cpu: ""
              memory: {{ .Values.things.resources.memoryMi }}Mi
          {{- if .Values.openshift.enabled }}
          {{- with .Values.openshift.securityContext }}
          securityContext:
            {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- else }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          {{- end }}
      priorityClassName: "{{ .Values.things.priorityClassName }}"
      {{- with .Values.things.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.things.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.things.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if .Values.global.logging.customConfigFile.enabled }}
        - name: ditto-custom-log-config
          configMap:
            name: {{ .Release.Name }}-logback-config-things-xml
        {{- end }}
        {{- if .Values.global.logging.logFiles.enabled }}
        - name: ditto-log-files-directory
          hostPath:
            path: /var/log/ditto
            type: DirectoryOrCreate
        {{- end }}
{{- end }}
