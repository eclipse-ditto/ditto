---
# Note:
# The K8S_NAMESPACE env variable relates to the namespace in which the Ditto service is running.
# According to this the pod-reader-role have to be created in the same namespace.

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: concierge
  labels:
    app: concierge
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: concierge
        actorSystemName: ditto-cluster
    spec:
      restartPolicy: Always
      containers:
      - name: concierge
        image: docker.io/eclipse/ditto-concierge:0.8.0
        imagePullPolicy: IfNotPresent
        command: ["java"]
        args: ["-jar", "/opt/ditto/starter.jar"]
        ports:
        - name: akka-remoting
          containerPort: 2551
          protocol: TCP
        - name: akka-mgmt-http
          containerPort: 8558
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8558
          initialDelaySeconds: 45
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2551
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 4
        resources:
          requests:
            cpu: "0.1"
            memory: "250Mi"
          limits:
            cpu: "1.0"
            memory: "1Gi"
        env:
        - name: INSTANCE_INDEX
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: DISCOVERY_METHOD
          value: "kubernetes-api"
          # namespace in which the Ditto service is running according to this the pod-reader-role have to be created in the same namespace
        - name: K8S_NAMESPACE
          value: "default"
        - name: TZ
          value: "Europe/Berlin"
        - name: OPENJ9_JAVA_OPTIONS
          value: "-Xtune:virtualized -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=40 -XX:+ExitOnOutOfMemoryError"
        - name: MONGO_DB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-uri
              key: mongodb-uri
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: connectivity
  labels:
    app: connectivity
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: connectivity
        actorSystemName: ditto-cluster
    spec:
      restartPolicy: Always
      containers:
      - name: connectivity
        image: docker.io/eclipse/ditto-connectivity:0.8.0
        imagePullPolicy: IfNotPresent
        command: ["java"]
        args: ["-jar", "/opt/ditto/starter.jar"]
        ports:
        - name: akka-remoting
          containerPort: 2551
          protocol: TCP
        - name: akka-mgmt-http
          containerPort: 8558
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8558
          initialDelaySeconds: 45
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2551
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 4
        resources:
          requests:
            cpu: "0.1"
            memory: "250Mi"
          limits:
            cpu: "1.0"
            memory: "1Gi"
        env:
        - name: INSTANCE_INDEX
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: DISCOVERY_METHOD
          value: "kubernetes-api"
          # namespace in which the Ditto service is running according to this the pod-reader-role have to be created in the same namespace
        - name: K8S_NAMESPACE
          value: "default"
        - name: TZ
          value: "Europe/Berlin"
        - name: OPENJ9_JAVA_OPTIONS
          value: "-Xtune:virtualized -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=40 -XX:+ExitOnOutOfMemoryError"
        - name: MONGO_DB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-uri
              key: mongodb-uri
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: things
  labels:
    app: things
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: things
        actorSystemName: ditto-cluster
    spec:
      restartPolicy: Always
      containers:
      - name: things
        image: docker.io/eclipse/ditto-things:0.8.0
        imagePullPolicy: IfNotPresent
        command: ["java"]
        args: ["-jar", "/opt/ditto/starter.jar"]
        ports:
        - name: akka-remoting
          containerPort: 2551
          protocol: TCP
        - name: akka-mgmt-http
          containerPort: 8558
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8558
          initialDelaySeconds: 45
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2551
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 4
        resources:
          requests:
            cpu: "0.1"
            memory: "250Mi"
          limits:
            cpu: "1.0"
            memory: "1Gi"
        env:
        - name: INSTANCE_INDEX
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: DISCOVERY_METHOD
          value: "kubernetes-api"
          # namespace in which the Ditto service is running according to this the pod-reader-role have to be created in the same namespace
        - name: K8S_NAMESPACE
          value: "default"
        - name: TZ
          value: "Europe/Berlin"
        - name: OPENJ9_JAVA_OPTIONS
          value: "-Xtune:virtualized -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=40 -XX:+ExitOnOutOfMemoryError"
        - name: MONGO_DB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-uri
              key: mongodb-uri
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: things-search
  labels:
    app: things-search
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: things-search
        actorSystemName: ditto-cluster
    spec:
      containers:
      - name: things-search
        image: docker.io/eclipse/ditto-things-search:0.8.0
        imagePullPolicy: IfNotPresent
        command: ["java"]
        args: ["-jar", "/opt/ditto/starter.jar"]
        ports:
        - name: akka-remoting
          containerPort: 2551
          protocol: TCP
        - name: akka-mgmt-http
          containerPort: 8558
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8558
          initialDelaySeconds: 45
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2551
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 4
        resources:
          requests:
            cpu: "0.1"
            memory: "250Mi"
          limits:
            cpu: "1.0"
            memory: "1Gi"
        env:
        - name: INSTANCE_INDEX
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: DISCOVERY_METHOD
          value: "kubernetes-api"
        - name: K8S_NAMESPACE
          value: "default"
        - name: TZ
          value: "Europe/Berlin"
        - name: OPENJ9_JAVA_OPTIONS
          value: "-Xtune:virtualized -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=40 -XX:+ExitOnOutOfMemoryError"
        - name: MONGO_DB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-uri
              key: mongodb-uri
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: policies
  labels:
    app: policies
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: policies
        actorSystemName: ditto-cluster
    spec:
      containers:
      - name: policies
        image: docker.io/eclipse//eclipse-ditto-policies:0.8.0
        imagePullPolicy: IfNotPresent
        command: ["java"]
        args: ["-jar", "/opt/ditto/starter.jar"]
        ports:
        - name: akka-remoting
          containerPort: 2551
          protocol: TCP
        - name: akka-mgmt-http
          containerPort: 8558
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8558
          initialDelaySeconds: 45
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2551
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 4
        resources:
          requests:
            cpu: "0.1"
            memory: "250Mi"
          limits:
            cpu: "1.0"
            memory: "1Gi"
        env:
        - name: INSTANCE_INDEX
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: DISCOVERY_METHOD
          value: "kubernetes-api"
          # namespace in which the Ditto service is running according to this the pod-reader-role have to be created in the same namespace
        - name: K8S_NAMESPACE
          value: "default"
        - name: TZ
          value: "Europe/Berlin"
        - name: OPENJ9_JAVA_OPTIONS
          value: "-Xtune:virtualized -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=40 -XX:+ExitOnOutOfMemoryError"
        - name: MONGO_DB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-uri
              key: mongodb-uri
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: gateway
  namespace: digitaltwins
  labels:
    app: gateway
spec:
  template:
    metadata:
      labels:
        app: gateway
        actorSystemName: ditto-cluster
    spec:
      containers:
      - name: gateway
        image: docker.io/eclipse/ditto-gateway:0.8.0
        imagePullPolicy: IfNotPresent
        command: ["java"]
        args: ["-jar", "/opt/ditto/starter.jar"]
        ports:
        - name: akka-remoting
          containerPort: 2551
          protocol: TCP
        - name: akka-mgmt-http
          containerPort: 8558
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8558
          initialDelaySeconds: 45
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2551
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 4
        resources:
          requests:
            cpu: "0.1"
            memory: "250Mi"
          limits:
            cpu: "1.0"
            memory: "1Gi"
        env:
        - name: ENABLE_DUMMY_AUTH
          value: "true"
        - name: INSTANCE_INDEX
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: DISCOVERY_METHOD
          value: "kubernetes-api"
          # namespace in which the Ditto service is running according to this the pod-reader-role have to be created in the same namespace
        - name: K8S_NAMESPACE
          value: "default"
        - name: BIND_HOSTNAME
          value: 0.0.0.0
        - name: TZ
          value: "Europe/Berlin"
        - name: OPENJ9_JAVA_OPTIONS
          value: "-Xtune:virtualized -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=40 -XX:+ExitOnOutOfMemoryError"
        - name: DEVOPS_PASSWORD
          value: "dittoPW1!"
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
spec:
  clusterIP: None
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: gateway
